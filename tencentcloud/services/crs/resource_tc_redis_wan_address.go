// Code generated by iacg; DO NOT EDIT.
package crs

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	redisv20180412 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/redis/v20180412"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudRedisWanAddress() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudRedisWanAddressCreate,
		Read:   resourceTencentCloudRedisWanAddressRead,
		Delete: resourceTencentCloudRedisWanAddressDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Instance ID.",
			},

			"wan_address": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Allocate Wan Address.",
			},
		},
	}
}

func resourceTencentCloudRedisWanAddressCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_redis_wan_address.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		instanceId string
	)
	var (
		request  = redisv20180412.NewAllocateWanAddressRequest()
		response = redisv20180412.NewAllocateWanAddressResponse()
	)

	if v, ok := d.GetOk("instance_id"); ok {
		instanceId = v.(string)
	}

	request.InstanceId = helper.String(instanceId)

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseRedisClient().AllocateWanAddressWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s create redis wan address failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	_ = response

	service := RedisService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
	_, _, _, err := service.CheckRedisOnlineOk(ctx, instanceId, 20*tccommon.ReadRetryTimeout)
	if err != nil {
		log.Printf("[CRITAL]%s redis networkConfig fail, reason:%s\n", logId, err.Error())
		return err
	}
	d.SetId(instanceId)

	return resourceTencentCloudRedisWanAddressRead(d, meta)
}

func resourceTencentCloudRedisWanAddressRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_redis_wan_address.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := RedisService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	instanceId := d.Id()

	_ = d.Set("instance_id", instanceId)

	respData, err := service.DescribeRedisWanAddressById(ctx, instanceId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `redis_wan_address` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.WanAddress != nil {
		_ = d.Set("wan_address", respData.WanAddress)
	}

	return nil
}

func resourceTencentCloudRedisWanAddressDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_redis_wan_address.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	instanceId := d.Id()

	var (
		request  = redisv20180412.NewReleaseWanAddressRequest()
		response = redisv20180412.NewReleaseWanAddressResponse()
	)

	request.InstanceId = helper.String(instanceId)

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseRedisClient().ReleaseWanAddressWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s delete redis wan address failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	_ = response
	service := RedisService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
	_, _, _, err := service.CheckRedisOnlineOk(ctx, instanceId, 20*tccommon.ReadRetryTimeout)
	if err != nil {
		log.Printf("[CRITAL]%s redis networkConfig fail, reason:%s\n", logId, err.Error())
		return err
	}
	return nil
}
