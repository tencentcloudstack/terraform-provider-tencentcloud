// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
	"strings"
)

func DataSourceTencentCloudWedataTaskInstances() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataTaskInstancesRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"keyword": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task name or Task ID. Supports fuzzy search filtering. Multiple values separated by commas.",
			},

			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Time zone. The time zone of the input time string, default UTC+8.",
			},

			"instance_type": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Instance type - 0: Backfill type - 1: Periodic instance - 2: Non-periodic instance.",
			},

			"instance_state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance status - WAIT_EVENT: Waiting for event - WAIT_UPSTREAM: Waiting for upstream - WAIT_RUN: Waiting to run - RUNNING: Running - SKIP_RUNNING: Skipped running - FAILED_RETRY: Failed retry - EXPIRED: Failed - COMPLETED: Success.",
			},

			"task_type_id": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Task type ID.",
			},

			"cycle_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task cycle type * ONEOFF_CYCLE: One-time * YEAR_CYCLE: Year * MONTH_CYCLE: Month * WEEK_CYCLE: Week * DAY_CYCLE: Day * HOUR_CYCLE: Hour * MINUTE_CYCLE: Minute * CRONTAB_CYCLE: Crontab expression type.",
			},

			"owner_uin": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task owner ID.",
			},

			"folder_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task folder ID.",
			},

			"workflow_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task workflow ID.",
			},

			"executor_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Executor resource group ID.",
			},

			"schedule_time_from": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance scheduled time filter condition Start time, format yyyy-MM-dd HH:mm:ss.",
			},

			"schedule_time_to": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance scheduled time filter condition End time, format yyyy-MM-dd HH:mm:ss.",
			},

			"start_time_from": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance execution start time filter condition Start time, format yyyy-MM-dd HH:mm:ss.",
			},

			"start_time_to": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance execution start time filter condition.End time, format yyyy-MM-dd HH:mm:ss.",
			},

			"last_update_time_from": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance last update time filter condition.Start time, format yyyy-MM-dd HH:mm:ss.",
			},

			"last_update_time_to": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Instance last update time filter condition.End time, format yyyy-MM-dd HH:mm:ss.",
			},

			"sort_column": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Result sorting field- SCHEDULE_DATE: Sort by scheduled time- START_TIME: Sort by execution start time- END_TIME: Sort by execution end time- COST_TIME: Sort by execution duration.",
			},

			"sort_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Sorting order: - ASC; - DESC.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Instance result set.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"total_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total count.",
						},
						"total_page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total pages.",
						},
						"page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page number.",
						},
						"page_size": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page size.",
						},
						"items": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Data list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Project ID.",
									},
									"instance_key": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Unique instance identifier.",
									},
									"folder_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Folder ID.",
									},
									"folder_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Folder name.",
									},
									"workflow_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Workflow ID.",
									},
									"workflow_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Workflow name.",
									},
									"task_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task ID.",
									},
									"task_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task name.",
									},
									"cur_run_date": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Instance data time.",
									},
									"instance_state": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Instance status.- WAIT_EVENT: Waiting for even: - WAIT_UPSTREAM: Waiting for upstream; - WAIT_RUN: Waiting to run; - RUNNING: Running; - SKIP_RUNNING: Skipped running; - FAILED_RETRY: Failed retry; - EXPIRED: Failed; - COMPLETED: Success.",
									},
									"instance_type": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Instance type. - 0: Backfill type; - 1: Periodic instance; - 2: Non-periodic instance.",
									},
									"owner_uin_list": {
										Type:        schema.TypeSet,
										Required:    true,
										Description: "Owner list.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"total_run_num": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Total run count.",
									},
									"task_type": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task type description.",
									},
									"task_type_id": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Task type ID.",
									},
									"cycle_type": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task cycle type.Supports filtering multiple types with OR relationship. O: ONEOFF_CYCLE;  Y: YEAR_CYCLE;  M: MONTH_CYCLE;  W: WEEK_CYCLE;  D: DAY_CYCLE;  H: HOUR_CYCLE;  I: MINUTE_CYCLE;  C: CRONTAB_CYCLE.",
									},
									"try_limit": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Retry limit per run failure.",
									},
									"tries": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Failed retry count. Reset to 0 when manually rerun or backfilled.",
									},
									"start_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Execution start time.",
									},
									"end_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Execution end time.",
									},
									"cost_time": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Execution duration, in ms.",
									},
									"scheduler_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Scheduled time.",
									},
									"last_update_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Last update time, format yyyy-MM-dd HH:mm:ss.",
									},
									"executor_group_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Executor resource group ID.",
									},
									"executor_group_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Resource group name.",
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataTaskInstancesRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_task_instances.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("keyword"); ok {
		paramMap["Keyword"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("time_zone"); ok {
		paramMap["TimeZone"] = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("instance_type"); ok {
		paramMap["InstanceType"] = helper.IntUint64(v.(int))
	}

	if v, ok := d.GetOk("instance_state"); ok {
		paramMap["InstanceState"] = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("task_type_id"); ok {
		paramMap["TaskTypeId"] = helper.IntUint64(v.(int))
	}

	if v, ok := d.GetOk("cycle_type"); ok {
		paramMap["CycleType"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("owner_uin"); ok {
		paramMap["OwnerUin"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("folder_id"); ok {
		paramMap["FolderId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("workflow_id"); ok {
		paramMap["WorkflowId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("executor_group_id"); ok {
		paramMap["ExecutorGroupId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("schedule_time_from"); ok {
		paramMap["ScheduleTimeFrom"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("schedule_time_to"); ok {
		paramMap["ScheduleTimeTo"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("start_time_from"); ok {
		paramMap["StartTimeFrom"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("start_time_to"); ok {
		paramMap["StartTimeTo"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("last_update_time_from"); ok {
		paramMap["LastUpdateTimeFrom"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("last_update_time_to"); ok {
		paramMap["LastUpdateTimeTo"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("sort_column"); ok {
		paramMap["SortColumn"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("sort_type"); ok {
		paramMap["SortType"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.ListTaskInstancesResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataTaskInstancesByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var instanceKey string
	dataMap := map[string]interface{}{}
	ids := []string{}

	if respData.Data != nil {
		if respData.Data.TotalCount != nil {
			dataMap["total_count"] = respData.Data.TotalCount
		}

		if respData.Data.TotalPageNumber != nil {
			dataMap["total_page_number"] = respData.Data.TotalPageNumber
		}

		if respData.Data.PageNumber != nil {
			dataMap["page_number"] = respData.Data.PageNumber
		}

		if respData.Data.PageSize != nil {
			dataMap["page_size"] = respData.Data.PageSize
		}

		itemsList := make([]map[string]interface{}, 0, len(respData.Data.Items))
		if respData.Data.Items != nil {
			for _, items := range respData.Data.Items {
				itemsMap := map[string]interface{}{}

				if items.ProjectId != nil {
					itemsMap["project_id"] = items.ProjectId
					projectId = *items.ProjectId
				}

				if items.InstanceKey != nil {
					itemsMap["instance_key"] = items.InstanceKey
					instanceKey = *items.InstanceKey
				}

				if items.FolderId != nil {
					itemsMap["folder_id"] = items.FolderId
				}

				if items.FolderName != nil {
					itemsMap["folder_name"] = items.FolderName
				}

				if items.WorkflowId != nil {
					itemsMap["workflow_id"] = items.WorkflowId
				}

				if items.WorkflowName != nil {
					itemsMap["workflow_name"] = items.WorkflowName
				}

				if items.TaskId != nil {
					itemsMap["task_id"] = items.TaskId
				}

				if items.TaskName != nil {
					itemsMap["task_name"] = items.TaskName
				}

				if items.CurRunDate != nil {
					itemsMap["cur_run_date"] = items.CurRunDate
				}

				if items.InstanceState != nil {
					itemsMap["instance_state"] = items.InstanceState
				}

				if items.InstanceType != nil {
					itemsMap["instance_type"] = items.InstanceType
				}

				if items.OwnerUinList != nil {
					itemsMap["owner_uin_list"] = items.OwnerUinList
				}

				if items.TotalRunNum != nil {
					itemsMap["total_run_num"] = items.TotalRunNum
				}

				if items.TaskType != nil {
					itemsMap["task_type"] = items.TaskType
				}

				if items.TaskTypeId != nil {
					itemsMap["task_type_id"] = items.TaskTypeId
				}

				if items.CycleType != nil {
					itemsMap["cycle_type"] = items.CycleType
				}

				if items.TryLimit != nil {
					itemsMap["try_limit"] = items.TryLimit
				}

				if items.Tries != nil {
					itemsMap["tries"] = items.Tries
				}

				if items.StartTime != nil {
					itemsMap["start_time"] = items.StartTime
				}

				if items.EndTime != nil {
					itemsMap["end_time"] = items.EndTime
				}

				if items.CostTime != nil {
					itemsMap["cost_time"] = items.CostTime
				}

				if items.SchedulerTime != nil {
					itemsMap["scheduler_time"] = items.SchedulerTime
				}

				if items.LastUpdateTime != nil {
					itemsMap["last_update_time"] = items.LastUpdateTime
				}

				if items.ExecutorGroupId != nil {
					itemsMap["executor_group_id"] = items.ExecutorGroupId
				}

				if items.ExecutorGroupName != nil {
					itemsMap["executor_group_name"] = items.ExecutorGroupName
				}

				ids = append(ids, strings.Join([]string{projectId, instanceKey}, tccommon.FILED_SP))
				itemsList = append(itemsList, itemsMap)
			}

			dataMap["items"] = itemsList
		}
		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
