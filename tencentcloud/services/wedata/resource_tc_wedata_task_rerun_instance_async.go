// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
	"log"
	"strings"
	"time"
)

func ResourceTencentCloudWedataTaskRerunInstanceAsync() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudWedataTaskRerunInstanceAsyncCreate,
		Read:   resourceTencentCloudWedataTaskRerunInstanceAsyncRead,
		Delete: resourceTencentCloudWedataTaskRerunInstanceAsyncDelete,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Project Id.",
			},

			"instance_key_list": {
				Type:        schema.TypeSet,
				Required:    true,
				ForceNew:    true,
				Description: "Instance id list, which can be obtained from ListInstances.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"rerun_type": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Rerun type, 1: self; 3: children; 2: self and children, default 1.",
			},

			"check_parent_type": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Whether to check upstream tasks: ALL, MAKE_SCOPE (selected), NONE (do not check anything), default is NONE.",
			},

			"son_range_type": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Downstream instance scope WORKFLOW: workflow PROJECT: project ALL: all cross-workflow dependent projects, default WORKFLOW.",
			},

			"skip_event_listening": {
				Type:        schema.TypeBool,
				Optional:    true,
				ForceNew:    true,
				Description: "Whether to ignore event monitoring when rerunning.",
			},

			"redefine_parallel_num": {
				Type:        schema.TypeInt,
				Optional:    true,
				ForceNew:    true,
				Description: "Customize the instance running concurrency. If not configured, the original self-dependency of the task will be used.",
			},

			"redefine_self_workflow_dependency": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Customized workflow self-dependence: yes to enable, no to disable. If not configured, the original workflow self-dependence will be used.",
			},

			"redefine_param_list": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				MaxItems:    1,
				Description: "Re-run instance custom parameters.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"k": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Key.",
						},
						"v": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Value.",
						},
					},
				},
			},
		},
	}
}

func resourceTencentCloudWedataTaskRerunInstanceAsyncCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_task_rerun_instance_async.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		projectId string
		asyncId   string
	)
	var (
		request  = wedatav20250806.NewRerunTaskInstancesAsyncRequest()
		response = wedatav20250806.NewRerunTaskInstancesAsyncResponse()
	)

	if v, ok := d.GetOk("project_id"); ok {
		projectId = v.(string)
		request.ProjectId = helper.String(projectId)
	}

	if v, ok := d.GetOk("instance_key_list"); ok {
		instanceKeyListSet := v.(*schema.Set).List()
		for i := range instanceKeyListSet {
			instanceKeyList := instanceKeyListSet[i].(string)
			request.InstanceKeyList = append(request.InstanceKeyList, helper.String(instanceKeyList))
		}
	}

	if v, ok := d.GetOk("rerun_type"); ok {
		request.RerunType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("check_parent_type"); ok {
		request.CheckParentType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("son_range_type"); ok {
		request.SonRangeType = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("skip_event_listening"); ok {
		request.SkipEventListening = helper.Bool(v.(bool))
	}

	if v, ok := d.GetOkExists("redefine_parallel_num"); ok {
		request.RedefineParallelNum = helper.IntInt64(v.(int))
	}

	if v, ok := d.GetOk("redefine_self_workflow_dependency"); ok {
		request.RedefineSelfWorkflowDependency = helper.String(v.(string))
	}

	if redefineParamListMap, ok := helper.InterfacesHeadMap(d, "redefine_param_list"); ok {
		kVMap := wedatav20250806.KVMap{}
		if v, ok := redefineParamListMap["k"].(string); ok && v != "" {
			kVMap.K = helper.String(v)
		}
		if v, ok := redefineParamListMap["v"].(string); ok && v != "" {
			kVMap.V = helper.String(v)
		}
		request.RedefineParamList = &kVMap
	}

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().RerunTaskInstancesAsyncWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s create wedata task rerun instance async failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	if response == nil || response.Response == nil || response.Response.Data == nil || response.Response.Data.AsyncId == nil {
		return fmt.Errorf("The returned AsyncId is empty.")
	}
	asyncId = *response.Response.Data.AsyncId

	if _, err := (&resource.StateChangeConf{
		Delay:      1 * time.Second,
		MinTimeout: 3 * time.Second,
		Pending:    []string{},
		Refresh:    resourceWedataTaskRerunInstanceAsyncCreateStateRefreshFunc_0_0(ctx, projectId, asyncId),
		Target:     []string{"SUCCESS"},
		Timeout:    3600 * time.Second,
	}).WaitForStateContext(ctx); err != nil {
		return err
	}
	d.SetId(strings.Join([]string{projectId, asyncId}, tccommon.FILED_SP))

	return resourceTencentCloudWedataTaskRerunInstanceAsyncRead(d, meta)
}

func resourceTencentCloudWedataTaskRerunInstanceAsyncRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_task_rerun_instance_async.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceTencentCloudWedataTaskRerunInstanceAsyncDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_task_rerun_instance_async.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceWedataTaskRerunInstanceAsyncCreateStateRefreshFunc_0_0(ctx context.Context, projectId string, asyncId string) resource.StateRefreshFunc {
	var req *wedatav20250806.GetOpsAsyncJobRequest
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = wedatav20250806.NewGetOpsAsyncJobRequest()
			req.ProjectId = helper.String(projectId)

			req.AsyncId = helper.String(asyncId)

		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().GetOpsAsyncJobWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		state := fmt.Sprintf("%v", *resp.Response.Data.Status)
		return resp.Response, state, nil
	}
}
