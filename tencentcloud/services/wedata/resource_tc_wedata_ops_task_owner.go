// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudWedataOpsTaskOwner() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudWedataOpsTaskOwnerCreate,
		Read:   resourceTencentCloudWedataOpsTaskOwnerRead,
		Update: resourceTencentCloudWedataOpsTaskOwnerUpdate,
		Delete: resourceTencentCloudWedataOpsTaskOwnerDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project id.",
			},

			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Task id.",
			},

			"owner_uin": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Task owner id.",
			},
		},
	}
}

func resourceTencentCloudWedataOpsTaskOwnerCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task_owner.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		projectId string
		taskId    string
	)

	if v, ok := d.GetOk("project_id"); ok {
		projectId = v.(string)
	}

	if v, ok := d.GetOk("task_id"); ok {
		taskId = v.(string)
	}

	d.SetId(strings.Join([]string{projectId, taskId}, tccommon.FILED_SP))

	return resourceTencentCloudWedataOpsTaskOwnerUpdate(d, meta)
}

func resourceTencentCloudWedataOpsTaskOwnerRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task_owner.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	projectId := idSplit[0]
	taskId := idSplit[1]

	respData, err := service.DescribeWedataOpsTaskOwnerById(ctx, projectId, taskId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `wedata_ops_task_owner` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	_ = d.Set("project_id", projectId)
	_ = d.Set("task_id", taskId)

	if respData.TaskBaseAttribute != nil {
		if respData.TaskBaseAttribute.OwnerUin != nil {
			_ = d.Set("owner_uin", respData.TaskBaseAttribute.OwnerUin)
		}
	}

	return nil
}

func resourceTencentCloudWedataOpsTaskOwnerUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task_owner.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	projectId := idSplit[0]
	taskId := idSplit[1]

	needChange := false
	mutableArgs := []string{"owner_uin"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := wedatav20250806.NewUpdateOpsTasksOwnerRequest()
		request.ProjectId = helper.String(projectId)
		request.TaskIds = append(request.TaskIds, helper.String(taskId))

		if v, ok := d.GetOk("owner_uin"); ok {
			request.OwnerUin = helper.String(v.(string))
		}

		reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().UpdateOpsTasksOwnerWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if reqErr != nil {
			log.Printf("[CRITAL]%s update wedata ops task owner failed, reason:%+v", logId, reqErr)
			return reqErr
		}
	}

	_ = projectId
	_ = taskId
	return resourceTencentCloudWedataOpsTaskOwnerRead(d, meta)
}

func resourceTencentCloudWedataOpsTaskOwnerDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task_owner.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}
