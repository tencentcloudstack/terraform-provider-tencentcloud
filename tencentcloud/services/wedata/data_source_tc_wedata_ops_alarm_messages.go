// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataOpsAlarmMessages() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsAlarmMessagesRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project id.",
			},

			"start_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Starting Alarm time. format: yyyy-MM-dd HH:MM:ss.",
			},

			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Specifies the Alarm end time in the format yyyy-MM-dd HH:MM:ss.",
			},

			"alarm_level": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Alarm level.",
			},

			"alarm_recipient_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Alert recipient Id.",
			},

			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "For incoming and returned filter time zone, default UTC+8.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Alarm information list.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page number.",
						},
						"page_size": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Pagination size.",
						},
						"total_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total number of entries.",
						},
						"total_page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total pages.",
						},
						"items": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Alarm information list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"alarm_message_id": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Alarm message Id.",
									},
									"alarm_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Alarm time. the same Alarm may be sent multiple times, only the latest Alarm time is displayed.",
									},
									"task_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task name.",
									},
									"task_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task ID.",
									},
									"cur_run_date": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Instance data time of the task.",
									},
									"alarm_reason": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Indicates the Alarm cause.",
									},
									"alarm_level": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Alarm level. 1. ordinary, 2. important, 3. critical.",
									},
									"alarm_rule_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Specifies the Id of the Alarm rule.",
									},
									"alarm_ways": {
										Type:        schema.TypeSet,
										Required:    true,
										Description: "Alarm channel specifies the notification methods: 1. mail, 2. sms, 3. wechat, 4. voice, 5. wecom, 6. Http, 7. wecom group, 8. lark group, 9. dingtalk group, 10. Slack group, 11. Teams group (default: 1. mail).",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"alarm_recipients": {
										Type:        schema.TypeSet,
										Required:    true,
										Description: "Alarm recipient.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsAlarmMessagesRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_alarm_messages.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	var projectId string
	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
		projectId = v.(string)
	}

	if v, ok := d.GetOk("start_time"); ok {
		paramMap["StartTime"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("end_time"); ok {
		paramMap["EndTime"] = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("alarm_level"); ok {
		paramMap["AlarmLevel"] = helper.IntUint64(v.(int))
	}

	if v, ok := d.GetOk("alarm_recipient_id"); ok {
		paramMap["AlarmRecipientId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("time_zone"); ok {
		paramMap["TimeZone"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.ListAlarmMessagesResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsAlarmMessagesByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var alarmMessageId string
	dataMap := map[string]interface{}{}
	ids := []string{}

	if respData.Data != nil {
		if respData.Data.PageNumber != nil {
			dataMap["page_number"] = respData.Data.PageNumber
		}

		if respData.Data.PageSize != nil {
			dataMap["page_size"] = respData.Data.PageSize
		}

		if respData.Data.TotalCount != nil {
			dataMap["total_count"] = respData.Data.TotalCount
		}

		if respData.Data.TotalPageNumber != nil {
			dataMap["total_page_number"] = respData.Data.TotalPageNumber
		}

		itemsList := make([]map[string]interface{}, 0, len(respData.Data.Items))
		if respData.Data.Items != nil {
			for _, items := range respData.Data.Items {
				itemsMap := map[string]interface{}{}

				if items.AlarmMessageId != nil {
					itemsMap["alarm_message_id"] = items.AlarmMessageId
					alarmMessageId = helper.UInt64ToStr(*items.AlarmMessageId)
				}

				if items.AlarmTime != nil {
					itemsMap["alarm_time"] = items.AlarmTime
				}

				if items.TaskName != nil {
					itemsMap["task_name"] = items.TaskName
				}

				if items.TaskId != nil {
					itemsMap["task_id"] = items.TaskId
				}

				if items.CurRunDate != nil {
					itemsMap["cur_run_date"] = items.CurRunDate
				}

				if items.AlarmReason != nil {
					itemsMap["alarm_reason"] = items.AlarmReason
				}

				if items.AlarmLevel != nil {
					itemsMap["alarm_level"] = items.AlarmLevel
				}

				if items.AlarmRuleId != nil {
					itemsMap["alarm_rule_id"] = items.AlarmRuleId
				}

				if items.AlarmWays != nil {
					itemsMap["alarm_ways"] = items.AlarmWays
				}

				if items.AlarmRecipients != nil {
					itemsMap["alarm_recipients"] = items.AlarmRecipients
				}

				itemsList = append(itemsList, itemsMap)
			}

			ids = append(ids, strings.Join([]string{projectId, alarmMessageId}, tccommon.FILED_SP))
			dataMap["items"] = itemsList
		}
		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
