// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudWedataTaskKillInstanceAsync() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudWedataTaskKillInstanceAsyncCreate,
		Read:   resourceTencentCloudWedataTaskKillInstanceAsyncRead,
		Delete: resourceTencentCloudWedataTaskKillInstanceAsyncDelete,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Project Id.",
			},

			"instance_key_list": {
				Type:        schema.TypeSet,
				Required:    true,
				ForceNew:    true,
				Description: "Instance id list, which can be obtained from ListInstances.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

func resourceTencentCloudWedataTaskKillInstanceAsyncCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_task_kill_instance_async.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		projectId string
		asyncId   string
	)
	var (
		request  = wedatav20250806.NewKillTaskInstancesAsyncRequest()
		response = wedatav20250806.NewKillTaskInstancesAsyncResponse()
	)

	if v, ok := d.GetOk("project_id"); ok {
		projectId = v.(string)
		request.ProjectId = helper.String(projectId)
	}

	if v, ok := d.GetOk("instance_key_list"); ok {
		instanceKeyListSet := v.(*schema.Set).List()
		for i := range instanceKeyListSet {
			instanceKeyList := instanceKeyListSet[i].(string)
			request.InstanceKeyList = append(request.InstanceKeyList, helper.String(instanceKeyList))
		}
	}

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().KillTaskInstancesAsyncWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s create wedata task kill instance async failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	if response == nil || response.Response == nil || response.Response.Data == nil || response.Response.Data.AsyncId == nil {
		return fmt.Errorf("The returned AsyncId is empty.")
	}
	asyncId = *response.Response.Data.AsyncId

	if _, err := (&resource.StateChangeConf{
		Delay:      1 * time.Second,
		MinTimeout: 3 * time.Second,
		Pending:    []string{"INIT", "RUNNING"},
		Refresh:    resourceWedataTaskKillInstanceAsyncCreateStateRefreshFunc_0_0(ctx, projectId, asyncId),
		Target:     []string{"SUCCESS"},
		Timeout:    3600 * time.Second,
	}).WaitForStateContext(ctx); err != nil {
		return err
	}
	d.SetId(strings.Join([]string{projectId, asyncId}, tccommon.FILED_SP))

	return resourceTencentCloudWedataTaskKillInstanceAsyncRead(d, meta)
}

func resourceTencentCloudWedataTaskKillInstanceAsyncRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_task_kill_instance_async.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceTencentCloudWedataTaskKillInstanceAsyncDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_task_kill_instance_async.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceWedataTaskKillInstanceAsyncCreateStateRefreshFunc_0_0(ctx context.Context, projectId string, asyncId string) resource.StateRefreshFunc {
	var req *wedatav20250806.GetOpsAsyncJobRequest
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = wedatav20250806.NewGetOpsAsyncJobRequest()
			req.ProjectId = helper.String(projectId)
			req.AsyncId = helper.String(asyncId)
		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().GetOpsAsyncJobWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		state := fmt.Sprintf("%v", *resp.Response.Data.Status)
		return resp.Response, state, nil
	}
}
