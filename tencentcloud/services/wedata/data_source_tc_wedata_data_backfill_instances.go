// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataDataBackfillInstances() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataDataBackfillInstancesRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"data_backfill_plan_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Backfill plan Id.",
			},

			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Task ID.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "All backfill  instances under one backfill  plan.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page number.",
						},
						"page_size": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Pagination size.",
						},
						"total_page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total pages.",
						},
						"total_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total number of records.",
						},
						"items": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Specifies the backfill instance list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"task_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task name.",
									},
									"task_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task ID.",
									},
									"cur_run_date": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Specifies the instance data time.",
									},
									"state": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Execution status.",
									},
									"start_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Start time.\n\n",
									},
									"end_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "End time.\n\n",
									},
									"cost_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Execution duration.\n\n",
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataDataBackfillInstancesRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_data_backfill_instances.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("data_backfill_plan_id"); ok {
		paramMap["DataBackfillPlanId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("task_id"); ok {
		paramMap["TaskId"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.ListDataBackfillInstancesResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataDataBackfillInstancesByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var taskId string
	var dataBackfillPlanId string
	dataMap := map[string]interface{}{}

	if respData.Data != nil {
		if respData.Data.PageNumber != nil {
			dataMap["page_number"] = respData.Data.PageNumber
		}

		if respData.Data.PageSize != nil {
			dataMap["page_size"] = respData.Data.PageSize
		}

		if respData.Data.TotalPageNumber != nil {
			dataMap["total_page_number"] = respData.Data.TotalPageNumber
		}

		if respData.Data.TotalCount != nil {
			dataMap["total_count"] = respData.Data.TotalCount
		}

		itemsList := make([]map[string]interface{}, 0, len(respData.Data.Items))
		if respData.Data.Items != nil {
			for _, items := range respData.Data.Items {
				itemsMap := map[string]interface{}{}

				if items.TaskName != nil {
					itemsMap["task_name"] = items.TaskName
				}

				if items.TaskId != nil {
					itemsMap["task_id"] = items.TaskId
				}

				if items.CurRunDate != nil {
					itemsMap["cur_run_date"] = items.CurRunDate
				}

				if items.State != nil {
					itemsMap["state"] = items.State
				}

				if items.StartTime != nil {
					itemsMap["start_time"] = items.StartTime
				}

				if items.EndTime != nil {
					itemsMap["end_time"] = items.EndTime
				}

				if items.CostTime != nil {
					itemsMap["cost_time"] = items.CostTime
				}

				itemsList = append(itemsList, itemsMap)
			}

			dataMap["items"] = itemsList
		}
		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(strings.Join([]string{projectId, taskId, dataBackfillPlanId}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
