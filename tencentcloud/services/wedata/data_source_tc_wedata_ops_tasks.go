// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataOpsTasks() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsTasksRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"task_type_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task type Id. -20: common data sync, - 25:ETLTaskType, - 26:ETLTaskType, - 30:python, - 31:pyspark, - 34:HiveSQLTaskType, - 35:shell, - 36:SparkSQLTaskType, - 21:JDBCSQLTaskType, - 32:DLCTaskType, - 33:ImpalaTaskType, - 40:CDWTaskType, - 41:kettle, - 46:DLCSparkTaskType, -47: TiOne machine learning, - 48:TrinoTaskType, - 50:DLCPyspark39:spark, - 92:mr, -38: shell script, -70: hivesql script, -1000: common custom business.",
			},

			"workflow_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Workflow ID.",
			},

			"workflow_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Workflow name.",
			},

			"owner_uin": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Owner id.",
			},

			"folder_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Folder ID.",
			},

			"source_service_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Data source ID.",
			},

			"target_service_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Target data source id.",
			},

			"executor_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Executor Group ID.",
			},

			"cycle_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task Cycle Type: ONEOFF_CYCLE: One-time, YEAR_CYCLE: Yearly, MONTH_CYCLE: Monthly, WEEK_CYCLE: Weekly, DAY_CYCLE: Daily, HOUR_CYCLE: Hourly, MINUTE_CYCLE: Minute-level, CRONTAB_CYCLE: Crontab expression-based.",
			},

			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Task Status: -Y: Running, -F: Stopped, -O: Frozen, -T: Stopping, -INVALID: Invalid.",
			},

			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Time zone. defaults to UTC+8.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Task list.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"total_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total number of results.",
						},
						"total_page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total pages.",
						},
						"items": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Record list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"task_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task ID.",
									},
									"task_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task name.",
									},
									"owner_uin": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Owner id.",
									},
									"status": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task Status: -N: New, -Y: Scheduling, -F: Offline, -O: Paused, -T: Offlining, -INVALID: Invalid..",
									},
									"folder_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Folder ID.",
									},
									"folder_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Folder name.",
									},
									"workflow_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Workflow id.",
									},
									"workflow_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Workflow name.",
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Project ID.",
									},
									"project_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Project name.",
									},
									"update_user_uin": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Specifies the name of the updater.",
									},
									"task_type_id": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Task type Id. 21:JDBC SQL, 23:TDSQL-PostgreSQL, 26:OfflineSynchronization, 30:Python, 31:PySpark, 33:Impala, 34:Hive SQL, 35:Shell, 36:Spark SQL, 38:Shell Form Mode, 39:Spark, 40:TCHouse-P, 41:Kettle, 42:Tchouse-X, 43:TCHouse-X SQL, 46:DLC Spark, 47:TiOne, 48:Trino, 50:DLC PySpark, 92:MapReduce, 130:Branch Node, 131:Merged Node, 132:Notebook, 133:SSH, 134:StarRocks, 137:For-each, 138:Setats SQL.",
									},
									"task_type_desc": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task type description. -Universal data synchronization, - ETLTaskType, - ETLTaskType, - python, - pyspark, - HiveSQLTaskType, - shell, - SparkSQLTaskType, - JDBCSQLTaskType, - DLCTaskType, - ImpalaTaskType, - CDWTaskType, - kettle, - DLCSparkTaskType, -TiOne machine learning, - TrinoTaskType, - DLCPyspark, - spark, - mr, -Specifies the shell script, -hivesql script, -Specifies common custom business.",
									},
									"cycle_type": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task Cycle Type: ONEOFF_CYCLE: One-time, YEAR_CYCLE: Yearly, MONTH_CYCLE: Monthly, WEEK_CYCLE: Weekly, DAY_CYCLE: Daily, HOUR_CYCLE: Hourly, MINUTE_CYCLE: Minute-level, CRONTAB_CYCLE: Crontab expression-based.",
									},
									"executor_group_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Resource group ID.",
									},
									"schedule_desc": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Scheduling description.",
									},
									"executor_group_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Resource group name.",
									},
									"last_scheduler_commit_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Latest scheduling submission time.",
									},
									"first_run_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "First execution time.",
									},
									"first_submit_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Most recent submission time.",
									},
									"create_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Creation time.",
									},
									"last_update_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Latest update time.",
									},
								},
							},
						},
						"page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page number.",
						},
						"page_size": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Pagination size.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsTasksRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_tasks.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("task_type_id"); ok {
		paramMap["TaskTypeId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("workflow_id"); ok {
		paramMap["WorkflowId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("workflow_name"); ok {
		paramMap["WorkflowName"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("owner_uin"); ok {
		paramMap["OwnerUin"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("folder_id"); ok {
		paramMap["FolderId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("source_service_id"); ok {
		paramMap["SourceServiceId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("target_service_id"); ok {
		paramMap["TargetServiceId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("executor_group_id"); ok {
		paramMap["ExecutorGroupId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("cycle_type"); ok {
		paramMap["CycleType"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("status"); ok {
		paramMap["Status"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("time_zone"); ok {
		paramMap["TimeZone"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.ListOpsTasksResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsTasksByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var taskId string
	dataMap := map[string]interface{}{}
	ids := []string{}

	if respData.Data != nil {
		if respData.Data.TotalCount != nil {
			dataMap["total_count"] = respData.Data.TotalCount
		}

		if respData.Data.TotalPageNumber != nil {
			dataMap["total_page_number"] = respData.Data.TotalPageNumber
		}

		itemsList := make([]map[string]interface{}, 0, len(respData.Data.Items))
		if respData.Data.Items != nil {
			for _, items := range respData.Data.Items {
				itemsMap := map[string]interface{}{}

				if items.TaskId != nil {
					itemsMap["task_id"] = items.TaskId
					taskId = *items.TaskId
				}

				if items.TaskName != nil {
					itemsMap["task_name"] = items.TaskName
				}

				if items.OwnerUin != nil {
					itemsMap["owner_uin"] = items.OwnerUin
				}

				if items.Status != nil {
					itemsMap["status"] = items.Status
				}

				if items.FolderId != nil {
					itemsMap["folder_id"] = items.FolderId
				}

				if items.FolderName != nil {
					itemsMap["folder_name"] = items.FolderName
				}

				if items.WorkflowId != nil {
					itemsMap["workflow_id"] = items.WorkflowId
				}

				if items.WorkflowName != nil {
					itemsMap["workflow_name"] = items.WorkflowName
				}

				if items.ProjectId != nil {
					itemsMap["project_id"] = items.ProjectId
					projectId = *items.ProjectId
				}

				if items.ProjectName != nil {
					itemsMap["project_name"] = items.ProjectName
				}

				if items.UpdateUserUin != nil {
					itemsMap["update_user_uin"] = items.UpdateUserUin
				}

				if items.TaskTypeId != nil {
					itemsMap["task_type_id"] = items.TaskTypeId
				}

				if items.TaskTypeDesc != nil {
					itemsMap["task_type_desc"] = items.TaskTypeDesc
				}

				if items.CycleType != nil {
					itemsMap["cycle_type"] = items.CycleType
				}

				if items.ExecutorGroupId != nil {
					itemsMap["executor_group_id"] = items.ExecutorGroupId
				}

				if items.ScheduleDesc != nil {
					itemsMap["schedule_desc"] = items.ScheduleDesc
				}

				if items.ExecutorGroupName != nil {
					itemsMap["executor_group_name"] = items.ExecutorGroupName
				}

				if items.LastSchedulerCommitTime != nil {
					itemsMap["last_scheduler_commit_time"] = items.LastSchedulerCommitTime
				}

				if items.FirstRunTime != nil {
					itemsMap["first_run_time"] = items.FirstRunTime
				}

				if items.FirstSubmitTime != nil {
					itemsMap["first_submit_time"] = items.FirstSubmitTime
				}

				if items.CreateTime != nil {
					itemsMap["create_time"] = items.CreateTime
				}

				if items.LastUpdateTime != nil {
					itemsMap["last_update_time"] = items.LastUpdateTime
				}

				itemsList = append(itemsList, itemsMap)
			}

			ids = append(ids, strings.Join([]string{projectId, taskId}, tccommon.FILED_SP))
			dataMap["items"] = itemsList
		}
		if respData.Data.PageNumber != nil {
			dataMap["page_number"] = respData.Data.PageNumber
		}

		if respData.Data.PageSize != nil {
			dataMap["page_size"] = respData.Data.PageSize
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
