// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
	"strings"
)

func DataSourceTencentCloudWedataOpsWorkflow() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsWorkflowRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"workflow_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Workflow ID.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Workflow scheduling details.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"workflow_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow ID.",
						},
						"workflow_desc": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow description.",
						},
						"workflow_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow type:\n - cycle: Periodic;\n - manual: Manual.",
						},
						"create_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Creation time.",
						},
						"create_user_uin": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Creator.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Modification time.",
						},
						"startup_time": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Delayed execution time, unit=minute.",
						},
						"start_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Configuration effective date - start date.",
						},
						"end_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Configuration end date - end date.",
						},
						"cycle_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task cycle type. `ONEOFF_CYCLE`: One-time; `YEAR_CYCLE`: Year; `MONTH_CYCLE`: Month; `WEEK_CYCLE`: Week; `DAY_CYCLE`: Day; `HOUR_CYCLE`: Hour; `MINUTE_CYCLE`: Minute; `CRONTAB_CYCLE`: Crontab expression type.",
						},
						"folder_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Folder ID.",
						},
						"instance_init_strategy": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task instance initialization strategy: \n - T_PLUS_1 (T+1): Initialize after one day delay;\n - T_PLUS_0 (T+0): Initialize on the same day;\n - T_MINUS_1 (T-1): Initialize one day in advance.",
						},
						"scheduler_desc": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Scheduling plan description.",
						},
						"first_submit_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow first submission time.",
						},
						"latest_submit_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow latest submission time.",
						},
						"status": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow status: `ALL_RUNNING`: All scheduled; `ALL_FREEZED`: All paused; `ALL_STOPPTED`: All offline; `PART_RUNNING`: Partially scheduled; `ALL_NO_RUNNING`: All unscheduled; `ALL_INVALID`: All invalid.",
						},
						"owner_uin": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Responsible persons, multiple separated by ';'.",
						},
						"workflow_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow name.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsWorkflowRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_workflow.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	var projectId string
	var workflowId string
	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		projectId = v.(string)
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("workflow_id"); ok {
		workflowId = v.(string)
		paramMap["WorkflowId"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.GetOpsWorkflowResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsWorkflowByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	dataMap := map[string]interface{}{}

	if respData.Data != nil {
		if respData.Data.WorkflowId != nil {
			dataMap["workflow_id"] = respData.Data.WorkflowId
		}

		if respData.Data.WorkflowDesc != nil {
			dataMap["workflow_desc"] = respData.Data.WorkflowDesc
		}

		if respData.Data.WorkflowType != nil {
			dataMap["workflow_type"] = respData.Data.WorkflowType
		}

		if respData.Data.CreateTime != nil {
			dataMap["create_time"] = respData.Data.CreateTime
		}

		if respData.Data.CreateUserUin != nil {
			dataMap["create_user_uin"] = respData.Data.CreateUserUin
		}

		if respData.Data.UpdateTime != nil {
			dataMap["update_time"] = respData.Data.UpdateTime
		}

		if respData.Data.StartupTime != nil {
			dataMap["startup_time"] = respData.Data.StartupTime
		}

		if respData.Data.StartTime != nil {
			dataMap["start_time"] = respData.Data.StartTime
		}

		if respData.Data.EndTime != nil {
			dataMap["end_time"] = respData.Data.EndTime
		}

		if respData.Data.CycleType != nil {
			dataMap["cycle_type"] = respData.Data.CycleType
		}

		if respData.Data.FolderId != nil {
			dataMap["folder_id"] = respData.Data.FolderId
		}

		if respData.Data.InstanceInitStrategy != nil {
			dataMap["instance_init_strategy"] = respData.Data.InstanceInitStrategy
		}

		if respData.Data.SchedulerDesc != nil {
			dataMap["scheduler_desc"] = respData.Data.SchedulerDesc
		}

		if respData.Data.FirstSubmitTime != nil {
			dataMap["first_submit_time"] = respData.Data.FirstSubmitTime
		}

		if respData.Data.LatestSubmitTime != nil {
			dataMap["latest_submit_time"] = respData.Data.LatestSubmitTime
		}

		if respData.Data.Status != nil {
			dataMap["status"] = respData.Data.Status
		}

		if respData.Data.OwnerUin != nil {
			dataMap["owner_uin"] = respData.Data.OwnerUin
		}

		if respData.Data.WorkflowName != nil {
			dataMap["workflow_name"] = respData.Data.WorkflowName
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(strings.Join([]string{projectId, workflowId}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
