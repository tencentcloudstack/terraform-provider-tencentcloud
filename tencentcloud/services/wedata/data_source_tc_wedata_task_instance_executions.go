// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataTaskInstanceExecutions() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataTaskInstanceExecutionsRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID to which it belongs.",
			},

			"instance_key": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Instance unique identifier, can be obtained via ListInstances.",
			},

			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "**Time zone** timeZone, the time zone of the input time string, default UTC+8.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Instance details.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"total_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total count of results.",
						},
						"total_page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total number of pages.",
						},
						"items": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Record list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"instance_key": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Instance unique identifier.",
									},
									"life_round_num": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Instance lifecycle round number, identifying a specific execution of the instance. For example: The first run of a periodic instance has a round number of 0; if the user reruns the instance later, the second execution will have a round number of 1.",
									},
									"instance_state": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Instance state, - WAIT_EVENT: Waiting for event, - WAIT_UPSTREAM: Waiting for upstream, - WAIT_RUN: Waiting to run, - RUNNING: Running, - SKIP_RUNNING: Skip running, - FAILED_RETRY: Failed and retrying, - EXPIRED: Failed, - COMPLETED: Completed.",
									},
									"run_type": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Instance run trigger type, - RERUN: Rerun, - ADDITION: Backfill, - PERIODIC: Periodic, - APERIODIC: Non-periodic, - RERUN_SKIP_RUN: Rerun - Skip run, - ADDITION_SKIP_RUN: Backfill - Skip run, - PERIODIC_SKIP_RUN: Periodic - Skip run, - APERIODIC_SKIP_RUN: Non-periodic - Skip run, - MANUAL_TRIGGER: Manual trigger, - RERUN_MANUAL_TRIGGER: Manual trigger - Rerun.",
									},
									"tries": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Failure retry count.",
									},
									"execution_phase_list": {
										Type:        schema.TypeList,
										Required:    true,
										Description: "Instance execution lifecycle list.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"start_time": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Start time of this state.",
												},
												"detail_state": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Instance lifecycle phase state, - WAIT_UPSTREAM: Waiting for event/upstream, - WAIT_RUN: Waiting to run, - RUNNING: Running, - COMPLETE: Final state - Completed, - FAILED: Final state - Failed and retrying, - EXPIRED: Final state - Failed, - SKIP_RUNNING: Final state - Branch skipped by upstream branch node, - HISTORY: For compatibility with historical instances before 2024-03-30, instances after that date do not need to pay attention to this enum type.",
												},
												"end_time": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "End time of this state.",
												},
											},
										},
									},
									"cost_time": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Cost time, in milliseconds.",
									},
								},
							},
						},
						"page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page number.",
						},
						"page_size": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page size.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataTaskInstanceExecutionsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_task_instance_executions.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("instance_key"); ok {
		paramMap["InstanceKey"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("time_zone"); ok {
		paramMap["TimeZone"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.ListTaskInstanceExecutionsResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataTaskInstanceExecutionsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var instanceKey string
	dataMap := map[string]interface{}{}
	ids := []string{}

	if respData.Data != nil {
		if respData.Data.TotalCount != nil {
			dataMap["total_count"] = respData.Data.TotalCount
		}

		if respData.Data.TotalPageNumber != nil {
			dataMap["total_page_number"] = respData.Data.TotalPageNumber
		}

		itemsList := make([]map[string]interface{}, 0, len(respData.Data.Items))
		if respData.Data.Items != nil {
			for _, items := range respData.Data.Items {
				itemsMap := map[string]interface{}{}

				if items.InstanceKey != nil {
					itemsMap["instance_key"] = items.InstanceKey
				}

				if items.LifeRoundNum != nil {
					itemsMap["life_round_num"] = items.LifeRoundNum
				}

				if items.InstanceState != nil {
					itemsMap["instance_state"] = items.InstanceState
				}

				if items.RunType != nil {
					itemsMap["run_type"] = items.RunType
				}

				if items.Tries != nil {
					itemsMap["tries"] = items.Tries
				}

				executionPhaseListList := make([]map[string]interface{}, 0, len(items.ExecutionPhaseList))
				if items.ExecutionPhaseList != nil {
					for _, executionPhaseList := range items.ExecutionPhaseList {
						executionPhaseListMap := map[string]interface{}{}

						if executionPhaseList.StartTime != nil {
							executionPhaseListMap["start_time"] = executionPhaseList.StartTime
						}

						if executionPhaseList.DetailState != nil {
							executionPhaseListMap["detail_state"] = executionPhaseList.DetailState
						}

						if executionPhaseList.EndTime != nil {
							executionPhaseListMap["end_time"] = executionPhaseList.EndTime
						}

						executionPhaseListList = append(executionPhaseListList, executionPhaseListMap)
					}

					itemsMap["execution_phase_list"] = executionPhaseListList
				}
				if items.CostTime != nil {
					itemsMap["cost_time"] = items.CostTime
				}

				ids = append(ids, strings.Join([]string{projectId, instanceKey}, tccommon.FILED_SP))
				itemsList = append(itemsList, itemsMap)
			}

			dataMap["items"] = itemsList
		}
		if respData.Data.PageNumber != nil {
			dataMap["page_number"] = respData.Data.PageNumber
		}

		if respData.Data.PageSize != nil {
			dataMap["page_size"] = respData.Data.PageSize
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
