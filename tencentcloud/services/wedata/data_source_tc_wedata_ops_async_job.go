// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
	"strings"
)

func DataSourceTencentCloudWedataOpsAsyncJob() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsAsyncJobRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"async_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Asynchronous operation ID.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Asynchronous operation detail result.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"project_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Project ID.",
						},
						"async_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Operation ID.",
						},
						"async_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Asynchronous operation type.",
						},
						"status": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Asynchronous operation status: Initial state: INIT; Running: RUNNING; Success: SUCCESS; Failure: FAIL; Partial success: PART_SUCCESS.",
						},
						"error_desc": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Error message.",
						},
						"total_sub_process_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Total number of sub-operations.",
						},
						"finished_sub_process_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Number of completed sub-operations.",
						},
						"success_sub_process_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Number of successful sub-operations.",
						},
						"create_user_uin": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Operator ID.",
						},
						"create_time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Operation creation time.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Update time.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsAsyncJobRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_async_job.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("async_id"); ok {
		paramMap["AsyncId"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.GetOpsAsyncJobResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsAsyncJobByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var asyncId string
	dataMap := map[string]interface{}{}

	if respData.Data != nil {
		if respData.Data.ProjectId != nil {
			projectId = *respData.Data.ProjectId
			dataMap["project_id"] = respData.Data.ProjectId
		}

		if respData.Data.AsyncId != nil {
			asyncId = *respData.Data.AsyncId
			dataMap["async_id"] = respData.Data.AsyncId
		}

		if respData.Data.AsyncType != nil {
			dataMap["async_type"] = respData.Data.AsyncType
		}

		if respData.Data.Status != nil {
			dataMap["status"] = respData.Data.Status
		}

		if respData.Data.ErrorDesc != nil {
			dataMap["error_desc"] = respData.Data.ErrorDesc
		}

		if respData.Data.TotalSubProcessCount != nil {
			dataMap["total_sub_process_count"] = respData.Data.TotalSubProcessCount
		}

		if respData.Data.FinishedSubProcessCount != nil {
			dataMap["finished_sub_process_count"] = respData.Data.FinishedSubProcessCount
		}

		if respData.Data.SuccessSubProcessCount != nil {
			dataMap["success_sub_process_count"] = respData.Data.SuccessSubProcessCount
		}

		if respData.Data.CreateUserUin != nil {
			dataMap["create_user_uin"] = respData.Data.CreateUserUin
		}

		if respData.Data.CreateTime != nil {
			dataMap["create_time"] = respData.Data.CreateTime
		}

		if respData.Data.UpdateTime != nil {
			dataMap["update_time"] = respData.Data.UpdateTime
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(strings.Join([]string{projectId, asyncId}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
