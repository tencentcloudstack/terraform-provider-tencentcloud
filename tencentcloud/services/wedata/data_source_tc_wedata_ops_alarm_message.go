// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataOpsAlarmMessage() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsAlarmMessageRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"alarm_message_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Alarm message Id.",
			},

			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Specifies the time zone of the return date. default UTC+8.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Alarm information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"alarm_message_id": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Alarm message Id.",
						},
						"alarm_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Alarm time. the same Alarm may be sent multiple times, only the latest Alarm time is displayed.",
						},
						"task_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task name.",
						},
						"task_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task ID.",
						},
						"cur_run_date": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Instance data time of the task.",
						},
						"alarm_reason": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Indicates the Alarm cause.",
						},
						"alarm_level": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Alarm level. 1. ordinary, 2. important, 3. critical.",
						},
						"alarm_rule_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Specifies the Id of the Alarm rule.",
						},
						"alarm_ways": {
							Type:        schema.TypeSet,
							Required:    true,
							Description: "Alarm channel specifies the notification methods: 1. mail, 2. sms, 3. wechat, 4. voice, 5. wecom, 6. Http, 7. wecom group, 8. lark group, 9. dingtalk group, 10. Slack group, 11. Teams group (default: 1. mail).",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"alarm_recipients": {
							Type:        schema.TypeSet,
							Required:    true,
							Description: "Alarm recipient.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsAlarmMessageRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_alarm_message.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	var projectId string
	var alarmMessageId string
	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
		projectId = v.(string)
	}

	if v, ok := d.GetOk("alarm_message_id"); ok {
		paramMap["AlarmMessageId"] = helper.String(v.(string))
		alarmMessageId = v.(string)
	}

	if v, ok := d.GetOk("time_zone"); ok {
		paramMap["TimeZone"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.GetAlarmMessageResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsAlarmMessageByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	dataMap := map[string]interface{}{}

	if respData.Data != nil {
		if respData.Data.AlarmMessageId != nil {
			dataMap["alarm_message_id"] = respData.Data.AlarmMessageId
		}

		if respData.Data.AlarmTime != nil {
			dataMap["alarm_time"] = respData.Data.AlarmTime
		}

		if respData.Data.TaskName != nil {
			dataMap["task_name"] = respData.Data.TaskName
		}

		if respData.Data.TaskId != nil {
			dataMap["task_id"] = respData.Data.TaskId
		}

		if respData.Data.CurRunDate != nil {
			dataMap["cur_run_date"] = respData.Data.CurRunDate
		}

		if respData.Data.AlarmReason != nil {
			dataMap["alarm_reason"] = respData.Data.AlarmReason
		}

		if respData.Data.AlarmLevel != nil {
			dataMap["alarm_level"] = respData.Data.AlarmLevel
		}

		if respData.Data.AlarmRuleId != nil {
			dataMap["alarm_rule_id"] = respData.Data.AlarmRuleId
		}

		if respData.Data.AlarmWays != nil {
			dataMap["alarm_ways"] = respData.Data.AlarmWays
		}

		if respData.Data.AlarmRecipients != nil {
			dataMap["alarm_recipients"] = respData.Data.AlarmRecipients
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(strings.Join([]string{projectId, alarmMessageId}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
