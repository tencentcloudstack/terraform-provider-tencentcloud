// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataTaskInstanceLog() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataTaskInstanceLogRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"instance_key": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique instance identifier.",
			},

			"life_round_num": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Instance lifecycle number, identifying a specific execution of the instance. For example: the first run of a periodic instance is 0, if manually rerun the second execution is 1; defaults to the latest execution.",
			},

			"log_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Log level, default All - Info - Debug - Warn - Error - All.",
			},

			"next_cursor": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Pagination cursor for log queries, no business meaning. First query uses null, subsequent queries use NextCursor from previous response.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Scheduled instance details.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_key": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Unique instance identifier.",
						},
						"project_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Project ID.",
						},
						"code_content": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Execution code content.",
						},
						"log_info": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Log content.",
						},
						"next_cursor": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Pagination cursor for log queries, no business meaning. First query uses null, subsequent queries use NextCursor from previous response.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataTaskInstanceLogRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_task_instance_log.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("instance_key"); ok {
		paramMap["InstanceKey"] = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("life_round_num"); ok {
		paramMap["LifeRoundNum"] = helper.IntUint64(v.(int))
	}

	if v, ok := d.GetOk("log_level"); ok {
		paramMap["LogLevel"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("next_cursor"); ok {
		paramMap["NextCursor"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.GetTaskInstanceLogResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataTaskInstanceLogByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var instanceKey string
	dataMap := map[string]interface{}{}

	if respData.Data != nil {
		if respData.Data.InstanceKey != nil {
			dataMap["instance_key"] = respData.Data.InstanceKey
			instanceKey = *respData.Data.InstanceKey
		}

		if respData.Data.ProjectId != nil {
			dataMap["project_id"] = respData.Data.ProjectId
			projectId = *respData.Data.ProjectId
		}

		if respData.Data.CodeContent != nil {
			dataMap["code_content"] = respData.Data.CodeContent
		}

		if respData.Data.LogInfo != nil {
			dataMap["log_info"] = respData.Data.LogInfo
		}

		if respData.Data.NextCursor != nil {
			dataMap["next_cursor"] = respData.Data.NextCursor
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(strings.Join([]string{projectId, instanceKey}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
