// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataTaskInstance() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataTaskInstanceRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"instance_key": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique instance identifier, can be obtained via ListInstances.",
			},

			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Time zone, the time zone of the input time string, default UTC+8.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Instance details.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"project_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Project ID.",
						},
						"instance_key": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Unique instance identifier.",
						},
						"folder_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Folder ID.",
						},
						"folder_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Folder name.",
						},
						"workflow_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow ID.",
						},
						"workflow_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow name.",
						},
						"task_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task ID.",
						},
						"task_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task name.",
						},
						"task_type_id": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "ID corresponding to taskType.",
						},
						"task_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task type.",
						},
						"cycle_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "**Task cycle type**.\n* ONEOFF_CYCLE: One-time\n* YEAR_CYCLE: Year\n* MONTH_CYCLE: Month\n* WEEK_CYCLE: Week\n* DAY_CYCLE: Day\n* HOUR_CYCLE: Hour\n* MINUTE_CYCLE: Minute\n* CRONTAB_CYCLE: Crontab expression type.",
						},
						"cur_run_date": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Instance data time.",
						},
						"instance_state": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "**Instance status**.\n- WAIT_EVENT: Waiting for event\n- WAIT_UPSTREAM: Waiting for upstream\n- WAIT_RUN: Waiting to run\n- RUNNING: Running\n- SKIP_RUNNING: Skipped running\n- FAILED_RETRY: Failed retry\n- EXPIRED: Failed\n- COMPLETED: Success.",
						},
						"instance_type": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Instance type.\n\n- 0: Backfill type\n- 1: Periodic instance\n- 2: Non-periodic instance.",
						},
						"owner_uin_list": {
							Type:        schema.TypeSet,
							Required:    true,
							Description: "Owner list.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"total_run_num": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total run count.",
						},
						"try_limit": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Retry limit per run failure.",
						},
						"tries": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Failed retry count.\nReset to 0 when manually rerun or backfilled.",
						},
						"cost_time": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Execution duration, in ms.",
						},
						"start_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Execution start time.",
						},
						"end_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Execution end time.",
						},
						"scheduler_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Scheduled time.",
						},
						"last_update_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Last update time, format yyyy-MM-dd HH:mm:ss.",
						},
						"executor_group_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Executor resource group ID.",
						},
						"executor_group_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Resource group name.",
						},
						"job_error_msg": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Brief task failure message.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataTaskInstanceRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_task_instance.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("instance_key"); ok {
		paramMap["InstanceKey"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("time_zone"); ok {
		paramMap["TimeZone"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.GetTaskInstanceResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataTaskInstanceByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var instanceKey string
	dataMap := map[string]interface{}{}

	if respData.Data != nil {
		if respData.Data.ProjectId != nil {
			dataMap["project_id"] = respData.Data.ProjectId
			projectId = *respData.Data.ProjectId
		}

		if respData.Data.InstanceKey != nil {
			dataMap["instance_key"] = respData.Data.InstanceKey
			instanceKey = *respData.Data.InstanceKey
		}

		if respData.Data.FolderId != nil {
			dataMap["folder_id"] = respData.Data.FolderId
		}

		if respData.Data.FolderName != nil {
			dataMap["folder_name"] = respData.Data.FolderName
		}

		if respData.Data.WorkflowId != nil {
			dataMap["workflow_id"] = respData.Data.WorkflowId
		}

		if respData.Data.WorkflowName != nil {
			dataMap["workflow_name"] = respData.Data.WorkflowName
		}

		if respData.Data.TaskId != nil {
			dataMap["task_id"] = respData.Data.TaskId
		}

		if respData.Data.TaskName != nil {
			dataMap["task_name"] = respData.Data.TaskName
		}

		if respData.Data.TaskTypeId != nil {
			dataMap["task_type_id"] = respData.Data.TaskTypeId
		}

		if respData.Data.TaskType != nil {
			dataMap["task_type"] = respData.Data.TaskType
		}

		if respData.Data.CycleType != nil {
			dataMap["cycle_type"] = respData.Data.CycleType
		}

		if respData.Data.CurRunDate != nil {
			dataMap["cur_run_date"] = respData.Data.CurRunDate
		}

		if respData.Data.InstanceState != nil {
			dataMap["instance_state"] = respData.Data.InstanceState
		}

		if respData.Data.InstanceType != nil {
			dataMap["instance_type"] = respData.Data.InstanceType
		}

		if respData.Data.OwnerUinList != nil {
			dataMap["owner_uin_list"] = respData.Data.OwnerUinList
		}

		if respData.Data.TotalRunNum != nil {
			dataMap["total_run_num"] = respData.Data.TotalRunNum
		}

		if respData.Data.TryLimit != nil {
			dataMap["try_limit"] = respData.Data.TryLimit
		}

		if respData.Data.Tries != nil {
			dataMap["tries"] = respData.Data.Tries
		}

		if respData.Data.CostTime != nil {
			dataMap["cost_time"] = respData.Data.CostTime
		}

		if respData.Data.StartTime != nil {
			dataMap["start_time"] = respData.Data.StartTime
		}

		if respData.Data.EndTime != nil {
			dataMap["end_time"] = respData.Data.EndTime
		}

		if respData.Data.SchedulerTime != nil {
			dataMap["scheduler_time"] = respData.Data.SchedulerTime
		}

		if respData.Data.LastUpdateTime != nil {
			dataMap["last_update_time"] = respData.Data.LastUpdateTime
		}

		if respData.Data.ExecutorGroupId != nil {
			dataMap["executor_group_id"] = respData.Data.ExecutorGroupId
		}

		if respData.Data.ExecutorGroupName != nil {
			dataMap["executor_group_name"] = respData.Data.ExecutorGroupName
		}

		if respData.Data.JobErrorMsg != nil {
			dataMap["job_error_msg"] = respData.Data.JobErrorMsg
		}

		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(strings.Join([]string{projectId, instanceKey}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
