// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudWedataOpsTask() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudWedataOpsTaskCreate,
		Read:   resourceTencentCloudWedataOpsTaskRead,
		Update: resourceTencentCloudWedataOpsTaskUpdate,
		Delete: resourceTencentCloudWedataOpsTaskDelete,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Project Id.",
			},

			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Task id.",
			},

			"action": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Action. Valid values: `START`, `PAUSE`.",
			},

			"enable_data_backfill": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Whether to re-record the intermediate instance from the last pause to the current one when starting. The default value is false, which means no re-recording.",
			},

			"kill_instance": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Whether required to terminate the generated instance.",
			},

			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Task status.",
			},
		},
	}
}

func resourceTencentCloudWedataOpsTaskCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		projectId string
		taskId    string
	)

	if v, ok := d.GetOk("project_id"); ok {
		projectId = v.(string)
	}

	if v, ok := d.GetOk("task_id"); ok {
		taskId = v.(string)
	}

	d.SetId(strings.Join([]string{projectId, taskId}, tccommon.FILED_SP))

	return resourceTencentCloudWedataOpsTaskUpdate(d, meta)
}

func resourceTencentCloudWedataOpsTaskRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	projectId := idSplit[0]
	taskId := idSplit[1]

	respData, err := service.DescribeWedataOpsTaskById(ctx, projectId, taskId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `wedata_ops_task` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}

	_ = d.Set("project_id", projectId)
	_ = d.Set("task_id", taskId)

	if respData.TaskBaseAttribute != nil {
		if respData.TaskBaseAttribute.Status != nil {
			_ = d.Set("status", respData.TaskBaseAttribute.Status)
		}
	}

	return nil
}

func resourceTencentCloudWedataOpsTaskUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	projectId := idSplit[0]
	taskId := idSplit[1]

	var action string
	if v, ok := d.GetOk("action"); ok {
		action = v.(string)
		if action != "START" && action != "PAUSE" {
			return fmt.Errorf("action only support `START` or `PAUSE`")
		}
	}

	needChange := false
	mutableArgs := []string{"action", "enable_data_backfill"}
	for _, v := range mutableArgs {
		if d.HasChange(v) && action == "START" {
			needChange = true
			break
		}
	}

	if needChange {
		request := wedatav20250806.NewStartOpsTasksRequest()
		response := wedatav20250806.NewStartOpsTasksResponse()

		if v, ok := d.GetOk("project_id"); ok {
			request.ProjectId = helper.String(v.(string))
		}

		if v, ok := d.GetOk("task_id"); ok {
			request.TaskIds = append(request.TaskIds, helper.String(v.(string)))
		}

		if v, ok := d.GetOkExists("enable_data_backfill"); ok {
			request.EnableDataBackfill = helper.Bool(v.(bool))
		}

		reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().StartOpsTasksWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			response = result
			return nil
		})
		if reqErr != nil {
			log.Printf("[CRITAL]%s update wedata ops task failed, reason:%+v", logId, reqErr)
			return reqErr
		}
		if response.Response.Data.Status == nil {
			return fmt.Errorf("status is empty")
		}

		if !*response.Response.Data.Status {
			return fmt.Errorf("start ops task failed, please check the task status")
		}
	}

	needChange1 := false
	mutableArgs1 := []string{"action", "kill_instance"}
	for _, v := range mutableArgs1 {
		if d.HasChange(v) && action == "PAUSE" {
			needChange1 = true
			break
		}
	}

	if needChange1 {
		request1 := wedatav20250806.NewPauseOpsTasksAsyncRequest()
		response1 := wedatav20250806.NewPauseOpsTasksAsyncResponse()

		if v, ok := d.GetOk("project_id"); ok {
			request1.ProjectId = helper.String(v.(string))
		}

		if v, ok := d.GetOk("task_id"); ok {
			request1.TaskIds = append(request1.TaskIds, helper.String(v.(string)))
		}

		if v, ok := d.GetOkExists("kill_instance"); ok {
			request1.KillInstance = helper.Bool(v.(bool))
		}

		reqErr1 := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().PauseOpsTasksAsyncWithContext(ctx, request1)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request1.GetAction(), request1.ToJsonString(), result.ToJsonString())
			}
			response1 = result
			return nil
		})
		if reqErr1 != nil {
			log.Printf("[CRITAL]%s update wedata ops task failed, reason:%+v", logId, reqErr1)
			return reqErr1
		}

		if response1.Response.Data.AsyncId == nil {
			return fmt.Errorf("async id is empty")
		}

		asyncId := *response1.Response.Data.AsyncId
		if _, err := (&resource.StateChangeConf{
			Delay:      1 * time.Second,
			MinTimeout: 3 * time.Second,
			Pending:    []string{"INIT", "RUNNING"},
			Refresh:    resourceWedataOpsTaskUpdateStateRefreshFunc_1_0(ctx, projectId, asyncId),
			Target:     []string{"SUCCESS"},
			Timeout:    3600 * time.Second,
		}).WaitForStateContext(ctx); err != nil {
			return err
		}
	}

	_ = projectId
	_ = taskId
	return resourceTencentCloudWedataOpsTaskRead(d, meta)
}

func resourceTencentCloudWedataOpsTaskDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_wedata_ops_task.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceWedataOpsTaskUpdateStateRefreshFunc_1_0(ctx context.Context, projectId string, asyncId string) resource.StateRefreshFunc {
	var req *wedatav20250806.GetOpsAsyncJobRequest
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = wedatav20250806.NewGetOpsAsyncJobRequest()
			req.ProjectId = helper.String(projectId)
			req.AsyncId = helper.String(asyncId)
		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWedataV20250806Client().GetOpsAsyncJobWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		state := fmt.Sprintf("%v", *resp.Response.Data.Status)
		return resp.Response, state, nil
	}
}
