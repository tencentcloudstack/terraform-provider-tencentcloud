// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
	"strings"
)

func DataSourceTencentCloudWedataOpsWorkflows() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsWorkflowsRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"folder_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "File ID.",
			},

			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Workflow status filter: `ALL_RUNNING`: All scheduled; `ALL_FREEZED`: All paused; `ALL_STOPPTED`: All offline; `PART_RUNNING`: Partially scheduled; `ALL_NO_RUNNING`: All unscheduled; `ALL_INVALID`: All invalid.",
			},

			"owner_uin": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Responsible person ID.",
			},

			"workflow_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Workflow type filter, supported values: `Cycle` or `Manual`. By default, only `Cycle` is queried.",
			},

			"key_word": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Workflow keyword filter, supports fuzzy matching by workflow ID/name.",
			},

			"sort_item": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Sorting field, optional values: `CreateTime`, `TaskCount`.",
			},

			"sort_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Sorting order, `DESC` or `ASC`, uppercase.",
			},

			"create_user_uin": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Creator ID.",
			},

			"modify_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Update time, format yyyy-MM-dd HH:mm:ss.",
			},

			"create_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Creation time, format yyyy-MM-dd HH:mm:ss.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Record list.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"task_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Task count.",
						},
						"folder_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "File name.",
						},
						"folder_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow file ID.",
						},
						"workflow_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow ID.",
						},
						"workflow_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow name.",
						},
						"workflow_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow type: - `Cycle`: Periodic; - `Manual`: Manual.",
						},
						"workflow_desc": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow description.",
						},
						"owner_uin": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Responsible person's user ID, multiple IDs separated by ';'.",
						},
						"project_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Project ID.",
						},
						"project_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Project name.",
						},
						"status": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow status: `ALL_RUNNING` : All scheduled; `ALL_FREEZED` : All paused; `ALL_STOPPTED` : All offline; `PART_RUNNING` : Partially scheduled; `ALL_NO_RUNNING` : All unscheduled; `ALL_INVALID` : All invalid.",
						},
						"create_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Workflow creation time.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Last update time, including development and production changes.",
						},
						"update_user_uin": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Last updated by, including development and production changes.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsWorkflowsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_workflows.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("folder_id"); ok {
		paramMap["FolderId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("status"); ok {
		paramMap["Status"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("owner_uin"); ok {
		paramMap["OwnerUin"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("workflow_type"); ok {
		paramMap["WorkflowType"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("key_word"); ok {
		paramMap["KeyWord"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("sort_item"); ok {
		paramMap["SortItem"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("sort_type"); ok {
		paramMap["SortType"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("create_user_uin"); ok {
		paramMap["CreateUserUin"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("modify_time"); ok {
		paramMap["ModifyTime"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("create_time"); ok {
		paramMap["CreateTime"] = helper.String(v.(string))
	}

	var respData []*wedatav20250806.OpsWorkflow
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsWorkflowsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var workflowId string

	ids := make([]string, 0, len(respData))
	dataList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, data := range respData {
			dataMap := map[string]interface{}{}

			if data.TaskCount != nil {
				dataMap["task_count"] = data.TaskCount
			}

			if data.FolderName != nil {
				dataMap["folder_name"] = data.FolderName
			}

			if data.FolderId != nil {
				dataMap["folder_id"] = data.FolderId
			}

			if data.WorkflowId != nil {
				dataMap["workflow_id"] = data.WorkflowId
			}

			if data.WorkflowName != nil {
				dataMap["workflow_name"] = data.WorkflowName
			}

			if data.WorkflowType != nil {
				dataMap["workflow_type"] = data.WorkflowType
			}

			if data.WorkflowDesc != nil {
				dataMap["workflow_desc"] = data.WorkflowDesc
			}

			if data.OwnerUin != nil {
				dataMap["owner_uin"] = data.OwnerUin
			}

			if data.ProjectId != nil {
				dataMap["project_id"] = data.ProjectId
				projectId = *data.ProjectId
			}

			if data.ProjectName != nil {
				dataMap["project_name"] = data.ProjectName
			}

			if data.Status != nil {
				dataMap["status"] = data.Status
			}

			if data.CreateTime != nil {
				dataMap["create_time"] = data.CreateTime
			}

			if data.UpdateTime != nil {
				dataMap["update_time"] = data.UpdateTime
			}

			if data.UpdateUserUin != nil {
				dataMap["update_user_uin"] = data.UpdateUserUin
			}

			ids = append(ids, strings.Join([]string{projectId, workflowId}, tccommon.FILED_SP))
			dataList = append(dataList, dataMap)
		}

		_ = d.Set("data", dataList)
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataList); e != nil {
			return e
		}
	}

	return nil
}
