// Code generated by iacg; DO NOT EDIT.
package wedata

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wedatav20250806 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/wedata/v20250806"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudWedataOpsUpstreamTasks() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudWedataOpsUpstreamTasksRead,
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Project ID.",
			},

			"task_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Task ID.",
			},

			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Upstream task details.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"total_count": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total number of results.",
						},
						"total_page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Total pages.",
						},
						"page_number": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Page number.",
						},
						"page_size": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Pagination size.",
						},
						"items": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Paging data.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"task_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task ID.",
									},
									"task_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task name.",
									},
									"workflow_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Workflow id.",
									},
									"workflow_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Workflow name.",
									},
									"project_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Project ID.",
									},
									"project_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Project name.",
									},
									"status": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task Status: -N: New, -Y: Scheduling, -F: Offline, -O: Paused, -T: Offlining, -INVALID: Invalid.",
									},
									"task_type_id": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Task type Id. 21:JDBC SQL, 23:TDSQL-PostgreSQL, 26:OfflineSynchronization, 30:Python, 31:PySpark, 33:Impala, 34:Hive SQL, 35:Shell, 36:Spark SQL, 38:Shell Form Mode, 39:Spark, 40:TCHouse-P, 41:Kettle, 42:Tchouse-X, 43:TCHouse-X SQL, 46:DLC Spark, 47:TiOne, 48:Trino, 50:DLC PySpark, 92:MapReduce, 130:Branch Node, 131:Merged Node, 132:Notebook, 133:SSH, 134:StarRocks, 137:For-each, 138:Setats SQL. Note: This field may return null, indicating that no valid values can be obtained.",
									},
									"task_type_desc": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task type description. -20 : universal data synchronization, - 25 :  ETLTaskType, - 26 :  ETLTaskType, - 30 :  python, - 31 :  pyspark, - 34 :  hivesql, - 35 :  shell, - 36 :  sparksql, - 21 :  jdbcsql, - 32 :  dlc, - 33 :  ImpalaTaskType, - 40 :  CDWTaskType, - 41 :  kettle, - 42 :  TCHouse-X, - 43 :  TCHouse-X SQL, - 46 :  dlcsparkTaskType, - 47 :  TiOneMachineLearningTaskType, - 48 :  Trino, - 50 :  DLCPyspark, - 23 :  TencentDistributedSQL, - 39 :  spark, - 92 :  MRTaskType, - 38 :  ShellScript, - 70 :  HiveSQLScrip, -130: specifies the branch, -131: specifies the merge, -132: specifies the Notebook explore, -133: specifies the SSH node, - 134 :  StarRocks, - 137 :  For-each, -10000: common custom business. Note: This field may return null, indicating that no valid values can be obtained.",
									},
									"folder_name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Folder name.",
									},
									"folder_id": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Folder ID.",
									},
									"first_submit_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Latest submission time.",
									},
									"first_run_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "First running time.",
									},
									"schedule_desc": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Describes the scheduling plan display description information.",
									},
									"cycle_type": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Task Cycle Type: ONEOFF_CYCLE: One-time, YEAR_CYCLE: Yearly, MONTH_CYCLE: Monthly, WEEK_CYCLE: Weekly, DAY_CYCLE: Daily, HOUR_CYCLE: Hourly, MINUTE_CYCLE: Minute-level, CRONTAB_CYCLE: Crontab expression-based.",
									},
									"owner_uin": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Specifies the person in charge.",
									},
									"execution_start_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Execution start time. format: HH:mm, for example 00:00.",
									},
									"execution_end_time": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Execution end time. format: HH:mm, for example 23:59.",
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudWedataOpsUpstreamTasksRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_wedata_ops_upstream_tasks.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WedataService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("project_id"); ok {
		paramMap["ProjectId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("task_id"); ok {
		paramMap["TaskId"] = helper.String(v.(string))
	}

	var respData *wedatav20250806.ListUpstreamOpsTasksResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeWedataOpsUpstreamTasksByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var projectId string
	var taskId string
	dataMap := map[string]interface{}{}
	ids := []string{}

	if respData.Data != nil {
		if respData.Data.TotalCount != nil {
			dataMap["total_count"] = respData.Data.TotalCount
		}

		if respData.Data.TotalPageNumber != nil {
			dataMap["total_page_number"] = respData.Data.TotalPageNumber
		}

		if respData.Data.PageNumber != nil {
			dataMap["page_number"] = respData.Data.PageNumber
		}

		if respData.Data.PageSize != nil {
			dataMap["page_size"] = respData.Data.PageSize
		}

		itemsList := make([]map[string]interface{}, 0, len(respData.Data.Items))
		if respData.Data.Items != nil {
			for _, items := range respData.Data.Items {
				itemsMap := map[string]interface{}{}

				if items.TaskId != nil {
					itemsMap["task_id"] = items.TaskId
					taskId = *items.TaskId
				}

				if items.TaskName != nil {
					itemsMap["task_name"] = items.TaskName
				}

				if items.WorkflowId != nil {
					itemsMap["workflow_id"] = items.WorkflowId
				}

				if items.WorkflowName != nil {
					itemsMap["workflow_name"] = items.WorkflowName
				}

				if items.ProjectId != nil {
					itemsMap["project_id"] = items.ProjectId
					projectId = *items.ProjectId
				}

				if items.ProjectName != nil {
					itemsMap["project_name"] = items.ProjectName
				}

				if items.Status != nil {
					itemsMap["status"] = items.Status
				}

				if items.TaskTypeId != nil {
					itemsMap["task_type_id"] = items.TaskTypeId
				}

				if items.TaskTypeDesc != nil {
					itemsMap["task_type_desc"] = items.TaskTypeDesc
				}

				if items.FolderName != nil {
					itemsMap["folder_name"] = items.FolderName
				}

				if items.FolderId != nil {
					itemsMap["folder_id"] = items.FolderId
				}

				if items.FirstSubmitTime != nil {
					itemsMap["first_submit_time"] = items.FirstSubmitTime
				}

				if items.FirstRunTime != nil {
					itemsMap["first_run_time"] = items.FirstRunTime
				}

				if items.ScheduleDesc != nil {
					itemsMap["schedule_desc"] = items.ScheduleDesc
				}

				if items.CycleType != nil {
					itemsMap["cycle_type"] = items.CycleType
				}

				if items.OwnerUin != nil {
					itemsMap["owner_uin"] = items.OwnerUin
				}

				if items.ExecutionStartTime != nil {
					itemsMap["execution_start_time"] = items.ExecutionStartTime
				}

				if items.ExecutionEndTime != nil {
					itemsMap["execution_end_time"] = items.ExecutionEndTime
				}

				ids = append(ids, strings.Join([]string{projectId, taskId}, tccommon.FILED_SP))
				itemsList = append(itemsList, itemsMap)
			}

			dataMap["items"] = itemsList
		}
		_ = d.Set("data", []interface{}{dataMap})
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataMap); e != nil {
			return e
		}
	}

	return nil
}
