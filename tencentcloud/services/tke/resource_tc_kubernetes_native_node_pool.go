// Code generated by iacg; DO NOT EDIT.
package tke

import (
	"context"
	"encoding/base64"
	"fmt"
	"log"
	"strings"

	sdkErrors "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	tke2 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tke/v20220501"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudKubernetesNativeNodePool() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudKubernetesNativeNodePoolCreate,
		Read:   resourceTencentCloudKubernetesNativeNodePoolRead,
		Update: resourceTencentCloudKubernetesNativeNodePoolUpdate,
		Delete: resourceTencentCloudKubernetesNativeNodePoolDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "ID of the cluster.",
			},

			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Node pool name.",
			},

			"type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Node pool type. Optional value is `Native`.",
			},

			"labels": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Node Labels.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Name in the map table.",
						},
						"value": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Value in map table.",
						},
					},
				},
			},

			"taints": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Node taint.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"key": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Key of the taint.",
						},
						"value": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Value of the taint.",
						},
						"effect": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Effect of the taint.",
						},
					},
				},
			},

			"tags": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Node tags.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"resource_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The resource type bound to the label.",
						},
						"tags": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Tag pair list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Tag Key.",
									},
									"value": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Tag Value.",
									},
								},
							},
						},
					},
				},
			},

			"deletion_protection": {
				Type:        schema.TypeBool,
				Optional:    true,
				Computed:    true,
				Description: "Whether to enable deletion protection.",
			},

			"unschedulable": {
				Type:        schema.TypeBool,
				Optional:    true,
				Computed:    true,
				Description: "Whether the node is not schedulable by default. The native node is not aware of it and passes false by default.",
			},

			"native": {
				Type:        schema.TypeList,
				Required:    true,
				MaxItems:    1,
				Description: "Native node pool creation parameters.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"scaling": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							MaxItems:    1,
							Description: "Node pool scaling configuration.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"min_replicas": {
										Type:        schema.TypeInt,
										Optional:    true,
										Computed:    true,
										Description: "Minimum number of replicas in node pool.",
									},
									"max_replicas": {
										Type:        schema.TypeInt,
										Optional:    true,
										Computed:    true,
										Description: "Maximum number of replicas in node pool.",
									},
									"create_policy": {
										Type:        schema.TypeString,
										Optional:    true,
										Computed:    true,
										Description: "Node pool expansion strategy. `ZoneEquality`: multiple availability zones are broken up; `ZonePriority`: the preferred availability zone takes precedence.",
									},
								},
							},
						},
						"subnet_ids": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Subnet list.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"instance_charge_type": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "Node billing type. `PREPAID` is a yearly and monthly subscription, `POSTPAID_BY_HOUR` is a pay-as-you-go plan. The default is `POSTPAID_BY_HOUR`.",
						},
						"system_disk": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							MaxItems:    1,
							Description: "System disk configuration.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disk_type": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: "Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD.",
									},
									"disk_size": {
										Type:        schema.TypeInt,
										Required:    true,
										ForceNew:    true,
										Description: "Cloud disk size (G).",
									},
									//"auto_format_and_mount": {
									//	Type:        schema.TypeBool,
									//	Optional:    true,
									//	Computed:    true,
									//	Description: "Whether to automatically format the disk and mount it.",
									//},
									//"file_system": {
									//	Type:        schema.TypeString,
									//	Optional:    true,
									//	Description: "File system.",
									//},
									//"mount_target": {
									//	Type:        schema.TypeString,
									//	Optional:    true,
									//	Description: "Mount directory.",
									//},
								},
							},
						},
						"instance_types": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Model list.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"security_group_ids": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Security group list.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						//"upgrade_settings": {
						//	Type:        schema.TypeList,
						//	Optional:    true,
						//	Computed:    true,
						//	MaxItems:    1,
						//	Description: "Automatically upgrade configuration.",
						//	Elem: &schema.Resource{
						//		Schema: map[string]*schema.Schema{
						//			"auto_upgrade": {
						//				Type:        schema.TypeBool,
						//				Optional:    true,
						//				Computed:    true,
						//				Description: "Whether to enable automatic upgrade.",
						//			},
						//			"upgrade_options": {
						//				Type:        schema.TypeList,
						//				Optional:    true,
						//				MaxItems:    1,
						//				Description: "Operation and maintenance window.",
						//				Elem: &schema.Resource{
						//					Schema: map[string]*schema.Schema{
						//						"auto_upgrade_start_time": {
						//							Type:        schema.TypeString,
						//							Optional:    true,
						//							Description: "Automatic upgrade start time.",
						//						},
						//						"duration": {
						//							Type:        schema.TypeString,
						//							Optional:    true,
						//							Description: "Automatic upgrade duration.",
						//						},
						//						"weekly_period": {
						//							Type:        schema.TypeList,
						//							Optional:    true,
						//							Description: "Operation and maintenance date.",
						//							Elem: &schema.Schema{
						//								Type: schema.TypeString,
						//							},
						//						},
						//					},
						//				},
						//			},
						//			"components": {
						//				Type:        schema.TypeList,
						//				Optional:    true,
						//				Description: "Upgrade items.",
						//				Elem: &schema.Schema{
						//					Type: schema.TypeString,
						//				},
						//			},
						//			"max_unavailable": {
						//				Type:        schema.TypeList,
						//				Optional:    true,
						//				MaxItems:    1,
						//				Description: "When upgrading, the maximum number of nodes that cannot be upgraded.",
						//				Elem: &schema.Resource{
						//					Schema: map[string]*schema.Schema{
						//						"type": {
						//							Type:        schema.TypeInt,
						//							Required:    true,
						//							Description: "Numeric type, 0 is int, 1 is string.",
						//						},
						//						"int_val": {
						//							Type:        schema.TypeInt,
						//							Optional:    true,
						//							Description: "Integer.",
						//						},
						//						"str_val": {
						//							Type:        schema.TypeString,
						//							Optional:    true,
						//							Description: "String.",
						//						},
						//					},
						//				},
						//			},
						//		},
						//	},
						//},
						"auto_repair": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Whether to enable self-healing ability.",
						},
						"instance_charge_prepaid": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							MaxItems:    1,
							ForceNew:    true,
							Description: "Billing configuration for yearly and monthly models.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"period": {
										Type:        schema.TypeInt,
										Required:    true,
										ForceNew:    true,
										Description: "Postpaid billing cycle, unit (month): 1, 2, 3, 4, 5,, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.",
									},
									"renew_flag": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: "Prepaid renewal method:\n  - `NOTIFY_AND_AUTO_RENEW`: Notify users of expiration and automatically renew (default).\n  - `NOTIFY_AND_MANUAL_RENEW`: Notify users of expiration, but do not automatically renew.\n  - `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Do not notify users of expiration and do not automatically renew.",
									},
								},
							},
						},
						"management": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							MaxItems:    1,
							Description: "Node pool management parameter settings.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"nameservers": {
										Type:        schema.TypeList,
										Optional:    true,
										Computed:    true,
										Description: "Dns configuration.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"hosts": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Hosts configuration.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"kernel_args": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Kernel parameter configuration.",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"health_check_policy_name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Fault self-healing rule name.",
						},
						"host_name_pattern": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Native node pool hostName pattern string.",
						},
						"kubelet_args": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Kubelet custom parameters.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"lifecycle": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							MaxItems:    1,
							Description: "Predefined scripts.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"pre_init": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Custom script before node initialization.",
									},
									"post_init": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Custom script after node initialization.",
									},
								},
							},
						},
						"runtime_root_dir": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "Runtime root directory.",
						},
						"enable_autoscaling": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Whether to enable elastic scaling.",
						},
						"replicas": {
							Type:        schema.TypeInt,
							Optional:    true,
							Computed:    true,
							Description: "Desired number of nodes.",
						},
						"internet_accessible": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							MaxItems:    1,
							Description: "Public network bandwidth settings.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"max_bandwidth_out": {
										Type:         schema.TypeInt,
										Required:     true,
										ForceNew:     true,
										Description:  "Maximum bandwidth output. Note: When chargeType is `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_POSTPAID_BY_HOUR`, the valid range is 1~100. When chargeType is `BANDWIDTH_PACKAG`, the valid range is 1~2000.",
										ValidateFunc: tccommon.ValidateIntegerMin(1),
									},
									"charge_type": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: "Network billing method. Optional value is `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.",
									},
									"bandwidth_package_id": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: "Bandwidth package ID. Note: When ChargeType is BANDWIDTH_PACKAG, the value cannot be empty; otherwise, the value must be empty.",
									},
								},
							},
						},
						"data_disks": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Native node pool data disk list.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disk_type": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD, `CLOUD_TSSD`: Tremendous SSD, `LOCAL_NVME`: local NVME disk.",
									},
									"file_system": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "File system (ext3/ext4/xfs).",
									},
									"disk_size": {
										Type:        schema.TypeInt,
										Required:    true,
										Description: "Cloud disk size (G).",
									},
									"auto_format_and_mount": {
										Type:        schema.TypeBool,
										Required:    true,
										Description: "Whether to automatically format the disk and mount it.",
									},
									"disk_partition": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Mount device name or partition name.",
									},
									"mount_target": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Mount directory.",
									},
									"encrypt": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Pass in this parameter to create an encrypted cloud disk. The value is fixed to `ENCRYPT`.",
									},
									"kms_key_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Customize the key when purchasing an encrypted disk. When this parameter is passed in, the Encrypt parameter is not empty.",
									},
									"snapshot_id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Snapshot ID. If passed in, the cloud disk will be created based on this snapshot. The snapshot type must be a data disk snapshot.",
									},
									"throughput_performance": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "Cloud disk performance, unit: MB/s. Use this parameter to purchase additional performance for the cloud disk.",
									},
								},
							},
						},
						"key_ids": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Node pool ssh public key id array.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"machine_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "Node pool type. Example value: `NativeCVM` or `Native`. Default is `Native`.",
						},
					},
				},
			},

			"annotations": {
				Type:        schema.TypeSet,
				Optional:    true,
				Computed:    true,
				Description: "Node Annotation List.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Name in the map table.",
						},
						"value": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Value in the map table.",
						},
					},
				},
			},

			"life_state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Node pool status.",
			},

			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Creation time.",
			},
		},
	}
}

func resourceTencentCloudKubernetesNativeNodePoolCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_native_node_pool.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		clusterId  string
		nodePoolId string
	)
	var (
		request  = tke2.NewCreateNodePoolRequest()
		response = tke2.NewCreateNodePoolResponse()
	)

	if v, ok := d.GetOk("cluster_id"); ok {
		clusterId = v.(string)
	}

	request.ClusterId = &clusterId

	if v, ok := d.GetOk("name"); ok {
		request.Name = helper.String(v.(string))
	}

	if v, ok := d.GetOk("type"); ok {
		request.Type = helper.String(v.(string))
	}

	if v, ok := d.GetOk("labels"); ok {
		for _, item := range v.(*schema.Set).List() {
			labelsMap := item.(map[string]interface{})
			label := tke2.Label{}
			if v, ok := labelsMap["name"]; ok {
				label.Name = helper.String(v.(string))
			}
			if v, ok := labelsMap["value"]; ok {
				label.Value = helper.String(v.(string))
			}
			request.Labels = append(request.Labels, &label)
		}
	}

	if v, ok := d.GetOk("taints"); ok {
		for _, item := range v.([]interface{}) {
			taintsMap := item.(map[string]interface{})
			taint := tke2.Taint{}
			if v, ok := taintsMap["key"]; ok {
				taint.Key = helper.String(v.(string))
			}
			if v, ok := taintsMap["value"]; ok {
				taint.Value = helper.String(v.(string))
			}
			if v, ok := taintsMap["effect"]; ok {
				taint.Effect = helper.String(v.(string))
			}
			request.Taints = append(request.Taints, &taint)
		}
	}

	if v, ok := d.GetOk("tags"); ok {
		for _, item := range v.([]interface{}) {
			tagsMap := item.(map[string]interface{})
			tagSpecification := tke2.TagSpecification{}
			if v, ok := tagsMap["resource_type"]; ok {
				tagSpecification.ResourceType = helper.String(v.(string))
			}
			if v, ok := tagsMap["tags"]; ok {
				for _, item := range v.([]interface{}) {
					tagsMap := item.(map[string]interface{})
					tag := tke2.Tag{}
					if v, ok := tagsMap["key"]; ok {
						tag.Key = helper.String(v.(string))
					}
					if v, ok := tagsMap["value"]; ok {
						tag.Value = helper.String(v.(string))
					}
					tagSpecification.Tags = append(tagSpecification.Tags, &tag)
				}
			}
			request.Tags = append(request.Tags, &tagSpecification)
		}
	}

	if v, ok := d.GetOkExists("deletion_protection"); ok {
		request.DeletionProtection = helper.Bool(v.(bool))
	}

	if v, ok := d.GetOkExists("unschedulable"); ok {
		request.Unschedulable = helper.Bool(v.(bool))
	}

	if nativeMap, ok := helper.InterfacesHeadMap(d, "native"); ok {
		createNativeNodePoolParam := tke2.CreateNativeNodePoolParam{}
		if scalingMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["scaling"]); ok {
			machineSetScaling := tke2.MachineSetScaling{}
			if v, ok := scalingMap["min_replicas"]; ok {
				machineSetScaling.MinReplicas = helper.IntInt64(v.(int))
			}
			if v, ok := scalingMap["max_replicas"]; ok {
				machineSetScaling.MaxReplicas = helper.IntInt64(v.(int))
			}
			if v, ok := scalingMap["create_policy"]; ok {
				machineSetScaling.CreatePolicy = helper.String(v.(string))
			}
			createNativeNodePoolParam.Scaling = &machineSetScaling
		}
		if v, ok := nativeMap["subnet_ids"]; ok {
			subnetIdsSet := v.([]interface{})
			for i := range subnetIdsSet {
				subnetIds := subnetIdsSet[i].(string)
				createNativeNodePoolParam.SubnetIds = append(createNativeNodePoolParam.SubnetIds, helper.String(subnetIds))
			}
		}
		if v, ok := nativeMap["instance_charge_type"]; ok {
			createNativeNodePoolParam.InstanceChargeType = helper.String(v.(string))
		}
		if systemDiskMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["system_disk"]); ok {
			disk := tke2.Disk{}
			if v, ok := systemDiskMap["disk_type"]; ok {
				disk.DiskType = helper.String(v.(string))
			}
			if v, ok := systemDiskMap["disk_size"]; ok {
				disk.DiskSize = helper.IntInt64(v.(int))
			}
			//if v, ok := systemDiskMap["auto_format_and_mount"]; ok {
			//	disk.AutoFormatAndMount = helper.Bool(v.(bool))
			//}
			//if v, ok := systemDiskMap["file_system"]; ok {
			//	disk.FileSystem = helper.String(v.(string))
			//}
			//if v, ok := systemDiskMap["mount_target"]; ok {
			//	disk.MountTarget = helper.String(v.(string))
			//}
			createNativeNodePoolParam.SystemDisk = &disk
		}
		if v, ok := nativeMap["instance_types"]; ok {
			instanceTypesSet := v.([]interface{})
			for i := range instanceTypesSet {
				instanceTypes := instanceTypesSet[i].(string)
				createNativeNodePoolParam.InstanceTypes = append(createNativeNodePoolParam.InstanceTypes, helper.String(instanceTypes))
			}
		}
		if v, ok := nativeMap["security_group_ids"]; ok {
			securityGroupIdsSet := v.([]interface{})
			for i := range securityGroupIdsSet {
				securityGroupIds := securityGroupIdsSet[i].(string)
				createNativeNodePoolParam.SecurityGroupIds = append(createNativeNodePoolParam.SecurityGroupIds, helper.String(securityGroupIds))
			}
		}
		//if upgradeSettingsMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["upgrade_settings"]); ok {
		//	machineUpgradeSettings := tke2.MachineUpgradeSettings{}
		//	if v, ok := upgradeSettingsMap["auto_upgrade"]; ok {
		//		machineUpgradeSettings.AutoUpgrade = helper.Bool(v.(bool))
		//	}
		//	if upgradeOptionsMap, ok := helper.ConvertInterfacesHeadToMap(upgradeSettingsMap["upgrade_options"]); ok {
		//		autoUpgradeOptions := tke2.AutoUpgradeOptions{}
		//		if v, ok := upgradeOptionsMap["auto_upgrade_start_time"]; ok {
		//			autoUpgradeOptions.AutoUpgradeStartTime = helper.String(v.(string))
		//		}
		//		if v, ok := upgradeOptionsMap["duration"]; ok {
		//			autoUpgradeOptions.Duration = helper.String(v.(string))
		//		}
		//		if v, ok := upgradeOptionsMap["weekly_period"]; ok {
		//			weeklyPeriodSet := v.([]interface{})
		//			for i := range weeklyPeriodSet {
		//				weeklyPeriod := weeklyPeriodSet[i].(string)
		//				autoUpgradeOptions.WeeklyPeriod = append(autoUpgradeOptions.WeeklyPeriod, helper.String(weeklyPeriod))
		//			}
		//		}
		//		machineUpgradeSettings.UpgradeOptions = &autoUpgradeOptions
		//	}
		//	if v, ok := upgradeSettingsMap["components"]; ok {
		//		componentsSet := v.([]interface{})
		//		for i := range componentsSet {
		//			components := componentsSet[i].(string)
		//			machineUpgradeSettings.Components = append(machineUpgradeSettings.Components, helper.String(components))
		//		}
		//	}
		//	if maxUnavailableMap, ok := helper.ConvertInterfacesHeadToMap(upgradeSettingsMap["max_unavailable"]); ok {
		//		intOrString := tke2.IntOrString{}
		//		if v, ok := maxUnavailableMap["type"]; ok {
		//			intOrString.Type = helper.IntInt64(v.(int))
		//		}
		//		if v, ok := maxUnavailableMap["int_val"]; ok {
		//			intOrString.IntVal = helper.IntInt64(v.(int))
		//		}
		//		if v, ok := maxUnavailableMap["str_val"]; ok {
		//			intOrString.StrVal = helper.String(v.(string))
		//		}
		//		machineUpgradeSettings.MaxUnavailable = &intOrString
		//	}
		//	createNativeNodePoolParam.UpgradeSettings = &machineUpgradeSettings
		//}
		if v, ok := nativeMap["auto_repair"]; ok {
			createNativeNodePoolParam.AutoRepair = helper.Bool(v.(bool))
		}
		if instanceChargePrepaidMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["instance_charge_prepaid"]); ok {
			instanceChargePrepaid := tke2.InstanceChargePrepaid{}
			if v, ok := instanceChargePrepaidMap["period"]; ok {
				instanceChargePrepaid.Period = helper.IntUint64(v.(int))
			}
			if v, ok := instanceChargePrepaidMap["renew_flag"]; ok {
				instanceChargePrepaid.RenewFlag = helper.String(v.(string))
			}
			createNativeNodePoolParam.InstanceChargePrepaid = &instanceChargePrepaid
		}
		if managementMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["management"]); ok {
			managementConfig := tke2.ManagementConfig{}
			if v, ok := managementMap["nameservers"]; ok {
				nameserversSet := v.([]interface{})
				for i := range nameserversSet {
					nameservers := nameserversSet[i].(string)
					managementConfig.Nameservers = append(managementConfig.Nameservers, helper.String(nameservers))
				}
			}
			if v, ok := managementMap["hosts"]; ok {
				hostsSet := v.([]interface{})
				for i := range hostsSet {
					hosts := hostsSet[i].(string)
					managementConfig.Hosts = append(managementConfig.Hosts, helper.String(hosts))
				}
			}
			if v, ok := managementMap["kernel_args"]; ok {
				kernelArgsSet := v.([]interface{})
				for i := range kernelArgsSet {
					kernelArgs := kernelArgsSet[i].(string)
					managementConfig.KernelArgs = append(managementConfig.KernelArgs, helper.String(kernelArgs))
				}
			}
			createNativeNodePoolParam.Management = &managementConfig
		}
		if v, ok := nativeMap["health_check_policy_name"]; ok {
			createNativeNodePoolParam.HealthCheckPolicyName = helper.String(v.(string))
		}
		if v, ok := nativeMap["host_name_pattern"]; ok {
			createNativeNodePoolParam.HostNamePattern = helper.String(v.(string))
		}
		if v, ok := nativeMap["kubelet_args"]; ok {
			kubeletArgsSet := v.([]interface{})
			for i := range kubeletArgsSet {
				kubeletArgs := kubeletArgsSet[i].(string)
				createNativeNodePoolParam.KubeletArgs = append(createNativeNodePoolParam.KubeletArgs, helper.String(kubeletArgs))
			}
		}
		if lifecycleMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["lifecycle"]); ok {
			lifecycleConfig := tke2.LifecycleConfig{}
			if v, ok := lifecycleMap["pre_init"]; ok {
				lifecycleConfig.PreInit = helper.String(v.(string))
			}
			if v, ok := lifecycleMap["post_init"]; ok {
				lifecycleConfig.PostInit = helper.String(v.(string))
			}
			createNativeNodePoolParam.Lifecycle = &lifecycleConfig
		}
		if v, ok := nativeMap["runtime_root_dir"]; ok {
			createNativeNodePoolParam.RuntimeRootDir = helper.String(v.(string))
		}
		if v, ok := nativeMap["enable_autoscaling"]; ok {
			createNativeNodePoolParam.EnableAutoscaling = helper.Bool(v.(bool))
		}
		if v, ok := nativeMap["replicas"]; ok {
			createNativeNodePoolParam.Replicas = helper.IntInt64(v.(int))
		}
		if internetAccessibleMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["internet_accessible"]); ok {
			internetAccessible := tke2.InternetAccessible{}
			if v, ok := internetAccessibleMap["max_bandwidth_out"]; ok {
				internetAccessible.MaxBandwidthOut = helper.IntInt64(v.(int))
			}
			if v, ok := internetAccessibleMap["charge_type"]; ok {
				internetAccessible.ChargeType = helper.String(v.(string))
			}
			if v, ok := internetAccessibleMap["bandwidth_package_id"]; ok {
				internetAccessible.BandwidthPackageId = helper.String(v.(string))
			}
			createNativeNodePoolParam.InternetAccessible = &internetAccessible
		}
		if v, ok := nativeMap["data_disks"]; ok {
			for _, item := range v.([]interface{}) {
				dataDisksMap := item.(map[string]interface{})
				dataDisk := tke2.DataDisk{}
				if v, ok := dataDisksMap["disk_type"]; ok {
					dataDisk.DiskType = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["file_system"]; ok {
					dataDisk.FileSystem = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["disk_size"]; ok {
					dataDisk.DiskSize = helper.IntInt64(v.(int))
				}
				if v, ok := dataDisksMap["auto_format_and_mount"]; ok {
					dataDisk.AutoFormatAndMount = helper.Bool(v.(bool))
				}
				if v, ok := dataDisksMap["disk_partition"]; ok {
					dataDisk.DiskPartition = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["mount_target"]; ok {
					dataDisk.MountTarget = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["encrypt"]; ok {
					dataDisk.Encrypt = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["kms_key_id"]; ok {
					dataDisk.KmsKeyId = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["snapshot_id"]; ok {
					dataDisk.SnapshotId = helper.String(v.(string))
				}
				if v, ok := dataDisksMap["throughput_performance"]; ok {
					dataDisk.ThroughputPerformance = helper.IntUint64(v.(int))
				}
				createNativeNodePoolParam.DataDisks = append(createNativeNodePoolParam.DataDisks, &dataDisk)
			}
		}
		if v, ok := nativeMap["key_ids"]; ok {
			keyIdsSet := v.([]interface{})
			for i := range keyIdsSet {
				keyIds := keyIdsSet[i].(string)
				createNativeNodePoolParam.KeyIds = append(createNativeNodePoolParam.KeyIds, helper.String(keyIds))
			}
		}
		if v, ok := nativeMap["machine_type"]; ok {
			createNativeNodePoolParam.MachineType = helper.String(v.(string))
		}
		request.Native = &createNativeNodePoolParam
	}

	if v, ok := d.GetOk("annotations"); ok {
		for _, item := range v.(*schema.Set).List() {
			annotationsMap := item.(map[string]interface{})
			annotation := tke2.Annotation{}
			if v, ok := annotationsMap["name"]; ok {
				annotation.Name = helper.String(v.(string))
			}
			if v, ok := annotationsMap["value"]; ok {
				annotation.Value = helper.String(v.(string))
			}
			request.Annotations = append(request.Annotations, &annotation)
		}
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTke2Client().CreateNodePoolWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create kubernetes native node pool failed, reason:%+v", logId, err)
		return err
	}

	nodePoolId = *response.Response.NodePoolId

	// wait for status ok
	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
	err = resource.Retry(5*tccommon.ReadRetryTimeout, func() *resource.RetryError {
		nodePool, errRet := service.DescribeKubernetesNativeNodePoolById(ctx, clusterId, nodePoolId)
		if errRet != nil {
			return tccommon.RetryError(errRet, tccommon.InternalError)
		}
		if nodePool != nil && *nodePool.LifeState == "Running" {
			return nil
		}
		log.Printf("[DEBUG]%s api[%s] native node pool status is %s, retry...", logId, request.GetAction(), *nodePool.LifeState)
		return resource.RetryableError(fmt.Errorf("native node pool status is %s, retry...", *nodePool.LifeState))
	})
	if err != nil {
		return err
	}

	d.SetId(strings.Join([]string{clusterId, nodePoolId}, tccommon.FILED_SP))

	return resourceTencentCloudKubernetesNativeNodePoolRead(d, meta)
}

func resourceTencentCloudKubernetesNativeNodePoolRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_native_node_pool.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	clusterId := idSplit[0]
	nodePoolId := idSplit[1]

	_ = d.Set("cluster_id", clusterId)

	respData, err := service.DescribeKubernetesNativeNodePoolById(ctx, clusterId, nodePoolId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `kubernetes_native_node_pool` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}

	tagsList := make([]map[string]interface{}, 0, len(respData.Tags))
	if respData.Tags != nil {
		for _, tags := range respData.Tags {
			tagsMap := map[string]interface{}{}

			if tags.ResourceType != nil {
				tagsMap["resource_type"] = tags.ResourceType
			}

			tagsList2 := make([]map[string]interface{}, 0, len(tags.Tags))
			if tags.Tags != nil {
				for _, tags := range tags.Tags {
					tagsMap2 := map[string]interface{}{}

					if tags.Key != nil {
						tagsMap2["key"] = tags.Key
					}

					if tags.Value != nil {
						tagsMap2["value"] = tags.Value
					}

					tagsList2 = append(tagsList2, tagsMap2)
				}

				tagsMap["tags"] = tagsList2
			}
			tagsList = append(tagsList, tagsMap)
		}

		_ = d.Set("tags", tagsList)
	}

	taintsList := make([]map[string]interface{}, 0, len(respData.Taints))
	if respData.Taints != nil {
		for _, taints := range respData.Taints {
			taintsMap := map[string]interface{}{}

			if taints.Key != nil {
				taintsMap["key"] = taints.Key
			}

			if taints.Value != nil {
				taintsMap["value"] = taints.Value
			}

			if taints.Effect != nil {
				taintsMap["effect"] = taints.Effect
			}

			taintsList = append(taintsList, taintsMap)
		}

		_ = d.Set("taints", taintsList)
	}

	if respData.DeletionProtection != nil {
		_ = d.Set("deletion_protection", respData.DeletionProtection)
	}

	if respData.Unschedulable != nil {
		_ = d.Set("unschedulable", respData.Unschedulable)
	}

	if respData.Type != nil {
		_ = d.Set("type", respData.Type)
	}

	labelsList := make([]map[string]interface{}, 0, len(respData.Labels))
	if respData.Labels != nil {
		for _, labels := range respData.Labels {
			labelsMap := map[string]interface{}{}

			if labels.Name != nil {
				labelsMap["name"] = labels.Name
			}

			if labels.Value != nil {
				labelsMap["value"] = labels.Value
			}

			labelsList = append(labelsList, labelsMap)
		}

		_ = d.Set("labels", labelsList)
	}

	if respData.LifeState != nil {
		_ = d.Set("life_state", respData.LifeState)
	}

	if respData.CreatedAt != nil {
		_ = d.Set("created_at", respData.CreatedAt)
	}

	if respData.Name != nil {
		_ = d.Set("name", respData.Name)
	}

	nativeMap := map[string]interface{}{}

	if respData.Native != nil {
		scalingMap := map[string]interface{}{}

		if respData.Native.Scaling != nil {
			if respData.Native.Scaling.MinReplicas != nil {
				scalingMap["min_replicas"] = respData.Native.Scaling.MinReplicas
			}

			if respData.Native.Scaling.MaxReplicas != nil {
				scalingMap["max_replicas"] = respData.Native.Scaling.MaxReplicas
			}

			if respData.Native.Scaling.CreatePolicy != nil {
				scalingMap["create_policy"] = respData.Native.Scaling.CreatePolicy
			}

			nativeMap["scaling"] = []interface{}{scalingMap}
		}

		if respData.Native.SubnetIds != nil {
			nativeMap["subnet_ids"] = respData.Native.SubnetIds
		}

		if respData.Native.SecurityGroupIds != nil {
			nativeMap["security_group_ids"] = respData.Native.SecurityGroupIds
		}

		//upgradeSettingsMap := map[string]interface{}{}

		//if respData.Native.UpgradeSettings != nil {
		//	if respData.Native.UpgradeSettings.AutoUpgrade != nil {
		//		upgradeSettingsMap["auto_upgrade"] = respData.Native.UpgradeSettings.AutoUpgrade
		//	}
		//
		//	upgradeOptionsMap := map[string]interface{}{}
		//
		//	if respData.Native.UpgradeSettings.UpgradeOptions != nil {
		//		if respData.Native.UpgradeSettings.UpgradeOptions.AutoUpgradeStartTime != nil {
		//			upgradeOptionsMap["auto_upgrade_start_time"] = respData.Native.UpgradeSettings.UpgradeOptions.AutoUpgradeStartTime
		//		}
		//
		//		if respData.Native.UpgradeSettings.UpgradeOptions.Duration != nil {
		//			upgradeOptionsMap["duration"] = respData.Native.UpgradeSettings.UpgradeOptions.Duration
		//		}
		//
		//		if respData.Native.UpgradeSettings.UpgradeOptions.WeeklyPeriod != nil {
		//			upgradeOptionsMap["weekly_period"] = respData.Native.UpgradeSettings.UpgradeOptions.WeeklyPeriod
		//		}
		//
		//		upgradeSettingsMap["upgrade_options"] = []interface{}{upgradeOptionsMap}
		//	}
		//
		//	if respData.Native.UpgradeSettings.Components != nil {
		//		upgradeSettingsMap["components"] = respData.Native.UpgradeSettings.Components
		//	}
		//
		//	maxUnavailableMap := map[string]interface{}{}
		//
		//	if respData.Native.UpgradeSettings.MaxUnavailable != nil {
		//		if respData.Native.UpgradeSettings.MaxUnavailable.Type != nil {
		//			maxUnavailableMap["type"] = respData.Native.UpgradeSettings.MaxUnavailable.Type
		//		}
		//
		//		if respData.Native.UpgradeSettings.MaxUnavailable.IntVal != nil {
		//			maxUnavailableMap["int_val"] = respData.Native.UpgradeSettings.MaxUnavailable.IntVal
		//		}
		//
		//		if respData.Native.UpgradeSettings.MaxUnavailable.StrVal != nil {
		//			maxUnavailableMap["str_val"] = respData.Native.UpgradeSettings.MaxUnavailable.StrVal
		//		}
		//
		//		upgradeSettingsMap["max_unavailable"] = []interface{}{maxUnavailableMap}
		//	}
		//
		//	nativeMap["upgrade_settings"] = []interface{}{upgradeSettingsMap}
		//}

		if respData.Native.AutoRepair != nil {
			nativeMap["auto_repair"] = respData.Native.AutoRepair
		}

		if respData.Native.InstanceChargeType != nil {
			nativeMap["instance_charge_type"] = respData.Native.InstanceChargeType
		}

		instanceChargePrepaidMap := map[string]interface{}{}

		if respData.Native.InstanceChargePrepaid != nil {
			if respData.Native.InstanceChargePrepaid.Period != nil {
				instanceChargePrepaidMap["period"] = respData.Native.InstanceChargePrepaid.Period
			}

			if respData.Native.InstanceChargePrepaid.RenewFlag != nil {
				instanceChargePrepaidMap["renew_flag"] = respData.Native.InstanceChargePrepaid.RenewFlag
			}

			nativeMap["instance_charge_prepaid"] = []interface{}{instanceChargePrepaidMap}
		}

		systemDiskMap := map[string]interface{}{}

		if respData.Native.SystemDisk != nil {
			if respData.Native.SystemDisk.DiskType != nil {
				systemDiskMap["disk_type"] = respData.Native.SystemDisk.DiskType
			}

			if respData.Native.SystemDisk.DiskSize != nil {
				systemDiskMap["disk_size"] = respData.Native.SystemDisk.DiskSize
			}

			//if respData.Native.SystemDisk.AutoFormatAndMount != nil {
			//	systemDiskMap["auto_format_and_mount"] = respData.Native.SystemDisk.AutoFormatAndMount
			//}
			//
			//if respData.Native.SystemDisk.FileSystem != nil {
			//	systemDiskMap["file_system"] = respData.Native.SystemDisk.FileSystem
			//}
			//
			//if respData.Native.SystemDisk.MountTarget != nil {
			//	systemDiskMap["mount_target"] = respData.Native.SystemDisk.MountTarget
			//}

			nativeMap["system_disk"] = []interface{}{systemDiskMap}
		}

		if respData.Native.KeyIds != nil {
			nativeMap["key_ids"] = respData.Native.KeyIds
		}

		if respData.Native.MachineType != nil {
			nativeMap["machine_type"] = respData.Native.MachineType
		}

		managementMap := map[string]interface{}{}

		if respData.Native.Management != nil {
			if respData.Native.Management.Nameservers != nil {
				managementMap["nameservers"] = respData.Native.Management.Nameservers
			}

			if respData.Native.Management.Hosts != nil {
				managementMap["hosts"] = respData.Native.Management.Hosts
			}

			if respData.Native.Management.KernelArgs != nil {
				managementMap["kernel_args"] = respData.Native.Management.KernelArgs
			}

			nativeMap["management"] = []interface{}{managementMap}
		}

		if respData.Native.HealthCheckPolicyName != nil {
			nativeMap["health_check_policy_name"] = respData.Native.HealthCheckPolicyName
		}

		if respData.Native.HostNamePattern != nil {
			nativeMap["host_name_pattern"] = respData.Native.HostNamePattern
		}

		if respData.Native.KubeletArgs != nil {
			nativeMap["kubelet_args"] = respData.Native.KubeletArgs
		}

		lifecycleMap := map[string]interface{}{}

		if respData.Native.Lifecycle != nil {
			if respData.Native.Lifecycle.PreInit != nil {
				lifecycleMap["pre_init"] = base64.StdEncoding.EncodeToString([]byte(*respData.Native.Lifecycle.PreInit))
				//lifecycleMap["pre_init"] = respData.Native.Lifecycle.PreInit
			}

			if respData.Native.Lifecycle.PostInit != nil {
				lifecycleMap["post_init"] = base64.StdEncoding.EncodeToString([]byte(*respData.Native.Lifecycle.PostInit))
				//lifecycleMap["post_init"] = respData.Native.Lifecycle.PostInit
			}

			nativeMap["lifecycle"] = []interface{}{lifecycleMap}
		}

		if respData.Native.RuntimeRootDir != nil {
			nativeMap["runtime_root_dir"] = respData.Native.RuntimeRootDir
		}

		if respData.Native.EnableAutoscaling != nil {
			nativeMap["enable_autoscaling"] = respData.Native.EnableAutoscaling
		}

		if respData.Native.InstanceTypes != nil {
			nativeMap["instance_types"] = respData.Native.InstanceTypes
		}

		if respData.Native.Replicas != nil {
			nativeMap["replicas"] = respData.Native.Replicas
		}

		internetAccessibleMap := map[string]interface{}{}

		if respData.Native.InternetAccessible != nil {
			if respData.Native.InternetAccessible.MaxBandwidthOut != nil {
				internetAccessibleMap["max_bandwidth_out"] = respData.Native.InternetAccessible.MaxBandwidthOut
			}

			if respData.Native.InternetAccessible.ChargeType != nil {
				internetAccessibleMap["charge_type"] = respData.Native.InternetAccessible.ChargeType
			}

			if respData.Native.InternetAccessible.BandwidthPackageId != nil {
				internetAccessibleMap["bandwidth_package_id"] = respData.Native.InternetAccessible.BandwidthPackageId
			}

			nativeMap["internet_accessible"] = []interface{}{internetAccessibleMap}
		}

		dataDisksList := make([]map[string]interface{}, 0, len(respData.Native.DataDisks))
		if respData.Native.DataDisks != nil {
			for _, dataDisks := range respData.Native.DataDisks {
				dataDisksMap := map[string]interface{}{}

				if dataDisks.DiskType != nil {
					dataDisksMap["disk_type"] = dataDisks.DiskType
				}

				if dataDisks.FileSystem != nil {
					dataDisksMap["file_system"] = dataDisks.FileSystem
				}

				if dataDisks.DiskSize != nil {
					dataDisksMap["disk_size"] = dataDisks.DiskSize
				}

				if dataDisks.AutoFormatAndMount != nil {
					dataDisksMap["auto_format_and_mount"] = dataDisks.AutoFormatAndMount
				}

				if dataDisks.DiskPartition != nil {
					dataDisksMap["disk_partition"] = dataDisks.DiskPartition
				}

				if dataDisks.MountTarget != nil {
					dataDisksMap["mount_target"] = dataDisks.MountTarget
				}

				if dataDisks.Encrypt != nil {
					dataDisksMap["encrypt"] = dataDisks.Encrypt
				}

				if dataDisks.KmsKeyId != nil {
					dataDisksMap["kms_key_id"] = dataDisks.KmsKeyId
				}

				if dataDisks.SnapshotId != nil {
					dataDisksMap["snapshot_id"] = dataDisks.SnapshotId
				}

				if dataDisks.ThroughputPerformance != nil {
					dataDisksMap["throughput_performance"] = dataDisks.ThroughputPerformance
				}

				dataDisksList = append(dataDisksList, dataDisksMap)
			}

			nativeMap["data_disks"] = dataDisksList
		}
		_ = d.Set("native", []interface{}{nativeMap})
	}

	annotationsList := make([]map[string]interface{}, 0, len(respData.Annotations))
	if respData.Annotations != nil {
		for _, annotations := range respData.Annotations {
			annotationsMap := map[string]interface{}{}

			if annotations.Name != nil && tkeNativeNodePoolAnnotationsMap[*annotations.Name] != "" {
				continue
			}

			if annotations.Name != nil {
				annotationsMap["name"] = annotations.Name
			}

			if annotations.Value != nil {
				annotationsMap["value"] = annotations.Value
			}

			annotationsList = append(annotationsList, annotationsMap)
		}

		_ = d.Set("annotations", annotationsList)
	}

	return nil
}

func resourceTencentCloudKubernetesNativeNodePoolUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_native_node_pool.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"type"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	clusterId := idSplit[0]
	nodePoolId := idSplit[1]

	needChange := false
	mutableArgs := []string{"name", "labels", "taints", "tags", "deletion_protection", "unschedulable", "native", "annotations"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := tke2.NewModifyNodePoolRequest()

		request.ClusterId = &clusterId

		request.NodePoolId = &nodePoolId

		if v, ok := d.GetOk("name"); ok {
			request.Name = helper.String(v.(string))
		}

		if v, ok := d.GetOk("labels"); ok {
			for _, item := range v.(*schema.Set).List() {
				labelsMap := item.(map[string]interface{})
				label := tke2.Label{}
				if v, ok := labelsMap["name"]; ok {
					label.Name = helper.String(v.(string))
				}
				if v, ok := labelsMap["value"]; ok {
					label.Value = helper.String(v.(string))
				}
				request.Labels = append(request.Labels, &label)
			}
		}

		if v, ok := d.GetOk("taints"); ok {
			for _, item := range v.([]interface{}) {
				taintsMap := item.(map[string]interface{})
				taint := tke2.Taint{}
				if v, ok := taintsMap["key"]; ok {
					taint.Key = helper.String(v.(string))
				}
				if v, ok := taintsMap["value"]; ok {
					taint.Value = helper.String(v.(string))
				}
				if v, ok := taintsMap["effect"]; ok {
					taint.Effect = helper.String(v.(string))
				}
				request.Taints = append(request.Taints, &taint)
			}
		}

		if v, ok := d.GetOk("tags"); ok {
			for _, item := range v.([]interface{}) {
				tagsMap := item.(map[string]interface{})
				tagSpecification := tke2.TagSpecification{}
				if v, ok := tagsMap["resource_type"]; ok {
					tagSpecification.ResourceType = helper.String(v.(string))
				}
				if v, ok := tagsMap["tags"]; ok {
					for _, item := range v.([]interface{}) {
						tagsMap := item.(map[string]interface{})
						tag := tke2.Tag{}
						if v, ok := tagsMap["key"]; ok {
							tag.Key = helper.String(v.(string))
						}
						if v, ok := tagsMap["value"]; ok {
							tag.Value = helper.String(v.(string))
						}
						tagSpecification.Tags = append(tagSpecification.Tags, &tag)
					}
				}
				request.Tags = append(request.Tags, &tagSpecification)
			}
		}

		if v, ok := d.GetOkExists("deletion_protection"); ok {
			request.DeletionProtection = helper.Bool(v.(bool))
		}

		if v, ok := d.GetOkExists("unschedulable"); ok {
			request.Unschedulable = helper.Bool(v.(bool))
		}

		if nativeMap, ok := helper.InterfacesHeadMap(d, "native"); ok {
			updateNativeNodePoolParam := tke2.UpdateNativeNodePoolParam{}
			if scalingMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["scaling"]); ok {
				machineSetScaling := tke2.MachineSetScaling{}
				if v, ok := scalingMap["min_replicas"]; ok {
					machineSetScaling.MinReplicas = helper.IntInt64(v.(int))
				}
				if v, ok := scalingMap["max_replicas"]; ok {
					machineSetScaling.MaxReplicas = helper.IntInt64(v.(int))
				}
				if v, ok := scalingMap["create_policy"]; ok {
					machineSetScaling.CreatePolicy = helper.String(v.(string))
				}
				updateNativeNodePoolParam.Scaling = &machineSetScaling
			}
			if v, ok := nativeMap["subnet_ids"]; ok {
				subnetIdsSet := v.([]interface{})
				for i := range subnetIdsSet {
					subnetIds := subnetIdsSet[i].(string)
					updateNativeNodePoolParam.SubnetIds = append(updateNativeNodePoolParam.SubnetIds, helper.String(subnetIds))
				}
			}
			if v, ok := nativeMap["security_group_ids"]; ok {
				securityGroupIdsSet := v.([]interface{})
				for i := range securityGroupIdsSet {
					securityGroupIds := securityGroupIdsSet[i].(string)
					updateNativeNodePoolParam.SecurityGroupIds = append(updateNativeNodePoolParam.SecurityGroupIds, helper.String(securityGroupIds))
				}
			}
			//if upgradeSettingsMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["upgrade_settings"]); ok {
			//	machineUpgradeSettings := tke2.MachineUpgradeSettings{}
			//	if v, ok := upgradeSettingsMap["auto_upgrade"]; ok {
			//		machineUpgradeSettings.AutoUpgrade = helper.Bool(v.(bool))
			//	}
			//	if upgradeOptionsMap, ok := helper.ConvertInterfacesHeadToMap(upgradeSettingsMap["upgrade_options"]); ok {
			//		autoUpgradeOptions := tke2.AutoUpgradeOptions{}
			//		if v, ok := upgradeOptionsMap["auto_upgrade_start_time"]; ok {
			//			autoUpgradeOptions.AutoUpgradeStartTime = helper.String(v.(string))
			//		}
			//		if v, ok := upgradeOptionsMap["duration"]; ok {
			//			autoUpgradeOptions.Duration = helper.String(v.(string))
			//		}
			//		if v, ok := upgradeOptionsMap["weekly_period"]; ok {
			//			weeklyPeriodSet := v.([]interface{})
			//			for i := range weeklyPeriodSet {
			//				weeklyPeriod := weeklyPeriodSet[i].(string)
			//				autoUpgradeOptions.WeeklyPeriod = append(autoUpgradeOptions.WeeklyPeriod, helper.String(weeklyPeriod))
			//			}
			//		}
			//		machineUpgradeSettings.UpgradeOptions = &autoUpgradeOptions
			//	}
			//	if v, ok := upgradeSettingsMap["components"]; ok {
			//		componentsSet := v.([]interface{})
			//		for i := range componentsSet {
			//			components := componentsSet[i].(string)
			//			machineUpgradeSettings.Components = append(machineUpgradeSettings.Components, helper.String(components))
			//		}
			//	}
			//	if maxUnavailableMap, ok := helper.ConvertInterfacesHeadToMap(upgradeSettingsMap["max_unavailable"]); ok {
			//		intOrString := tke2.IntOrString{}
			//		if v, ok := maxUnavailableMap["type"]; ok {
			//			intOrString.Type = helper.IntInt64(v.(int))
			//		}
			//		if v, ok := maxUnavailableMap["int_val"]; ok {
			//			intOrString.IntVal = helper.IntInt64(v.(int))
			//		}
			//		if v, ok := maxUnavailableMap["str_val"]; ok {
			//			intOrString.StrVal = helper.String(v.(string))
			//		}
			//		machineUpgradeSettings.MaxUnavailable = &intOrString
			//	}
			//	updateNativeNodePoolParam.UpgradeSettings = &machineUpgradeSettings
			//}
			if v, ok := nativeMap["auto_repair"]; ok {
				updateNativeNodePoolParam.AutoRepair = helper.Bool(v.(bool))
			}

			var instanceChargeType string
			if v, ok := nativeMap["instance_charge_type"]; ok {
				updateNativeNodePoolParam.InstanceChargeType = helper.String(v.(string))
				instanceChargeType = v.(string)
			}

			if instanceChargeType == "PREPAID" {
				if instanceChargePrepaidMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["instance_charge_prepaid"]); ok {
					instanceChargePrepaid := tke2.InstanceChargePrepaid{}
					if v, ok := instanceChargePrepaidMap["period"]; ok {
						instanceChargePrepaid.Period = helper.IntUint64(v.(int))
					}

					if v, ok := instanceChargePrepaidMap["renew_flag"]; ok {
						instanceChargePrepaid.RenewFlag = helper.String(v.(string))
					}

					updateNativeNodePoolParam.InstanceChargePrepaid = &instanceChargePrepaid
				}
			}

			if systemDiskMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["system_disk"]); ok {
				disk := tke2.Disk{}
				if v, ok := systemDiskMap["disk_type"]; ok {
					disk.DiskType = helper.String(v.(string))
				}
				if v, ok := systemDiskMap["disk_size"]; ok {
					disk.DiskSize = helper.IntInt64(v.(int))
				}
				//if v, ok := systemDiskMap["auto_format_and_mount"]; ok {
				//	disk.AutoFormatAndMount = helper.Bool(v.(bool))
				//}
				//if v, ok := systemDiskMap["file_system"]; ok {
				//	disk.FileSystem = helper.String(v.(string))
				//}
				//if v, ok := systemDiskMap["mount_target"]; ok {
				//	disk.MountTarget = helper.String(v.(string))
				//}
				updateNativeNodePoolParam.SystemDisk = &disk
			}
			if managementMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["management"]); ok {
				managementConfig := tke2.ManagementConfig{}
				if v, ok := managementMap["nameservers"]; ok {
					nameserversSet := v.([]interface{})
					for i := range nameserversSet {
						nameservers := nameserversSet[i].(string)
						managementConfig.Nameservers = append(managementConfig.Nameservers, helper.String(nameservers))
					}
				}
				if v, ok := managementMap["hosts"]; ok {
					hostsSet := v.([]interface{})
					for i := range hostsSet {
						hosts := hostsSet[i].(string)
						managementConfig.Hosts = append(managementConfig.Hosts, helper.String(hosts))
					}
				}
				if v, ok := managementMap["kernel_args"]; ok {
					kernelArgsSet := v.([]interface{})
					for i := range kernelArgsSet {
						kernelArgs := kernelArgsSet[i].(string)
						managementConfig.KernelArgs = append(managementConfig.KernelArgs, helper.String(kernelArgs))
					}
				}
				updateNativeNodePoolParam.Management = &managementConfig
			}
			if v, ok := nativeMap["health_check_policy_name"]; ok {
				updateNativeNodePoolParam.HealthCheckPolicyName = helper.String(v.(string))
			}
			if v, ok := nativeMap["host_name_pattern"]; ok {
				updateNativeNodePoolParam.HostNamePattern = helper.String(v.(string))
			}
			if v, ok := nativeMap["kubelet_args"]; ok {
				kubeletArgsSet := v.([]interface{})
				for i := range kubeletArgsSet {
					kubeletArgs := kubeletArgsSet[i].(string)
					updateNativeNodePoolParam.KubeletArgs = append(updateNativeNodePoolParam.KubeletArgs, helper.String(kubeletArgs))
				}
			}
			if lifecycleMap, ok := helper.ConvertInterfacesHeadToMap(nativeMap["lifecycle"]); ok {
				lifecycleConfig := tke2.LifecycleConfig{}
				if v, ok := lifecycleMap["pre_init"]; ok {
					lifecycleConfig.PreInit = helper.String(v.(string))
				}
				if v, ok := lifecycleMap["post_init"]; ok {
					lifecycleConfig.PostInit = helper.String(v.(string))
				}
				updateNativeNodePoolParam.Lifecycle = &lifecycleConfig
			}
			if v, ok := nativeMap["enable_autoscaling"]; ok {
				updateNativeNodePoolParam.EnableAutoscaling = helper.Bool(v.(bool))
			}
			if v, ok := nativeMap["instance_types"]; ok {
				instanceTypesSet := v.([]interface{})
				for i := range instanceTypesSet {
					instanceTypes := instanceTypesSet[i].(string)
					updateNativeNodePoolParam.InstanceTypes = append(updateNativeNodePoolParam.InstanceTypes, helper.String(instanceTypes))
				}
			}
			if v, ok := nativeMap["replicas"]; ok {
				updateNativeNodePoolParam.Replicas = helper.IntInt64(v.(int))
			}
			if v, ok := nativeMap["data_disks"]; ok {
				for _, item := range v.([]interface{}) {
					dataDisksMap := item.(map[string]interface{})
					dataDisk := tke2.DataDisk{}
					if v, ok := dataDisksMap["disk_type"]; ok {
						dataDisk.DiskType = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["file_system"]; ok {
						dataDisk.FileSystem = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["disk_size"]; ok {
						dataDisk.DiskSize = helper.IntInt64(v.(int))
					}
					if v, ok := dataDisksMap["auto_format_and_mount"]; ok {
						dataDisk.AutoFormatAndMount = helper.Bool(v.(bool))
					}
					if v, ok := dataDisksMap["disk_partition"]; ok {
						dataDisk.DiskPartition = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["mount_target"]; ok {
						dataDisk.MountTarget = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["encrypt"]; ok {
						dataDisk.Encrypt = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["kms_key_id"]; ok {
						dataDisk.KmsKeyId = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["snapshot_id"]; ok {
						dataDisk.SnapshotId = helper.String(v.(string))
					}
					if v, ok := dataDisksMap["throughput_performance"]; ok {
						dataDisk.ThroughputPerformance = helper.IntUint64(v.(int))
					}
					updateNativeNodePoolParam.DataDisks = append(updateNativeNodePoolParam.DataDisks, &dataDisk)
				}
			}
			if v, ok := nativeMap["key_ids"]; ok {
				keyIdsSet := v.([]interface{})
				for i := range keyIdsSet {
					keyIds := keyIdsSet[i].(string)
					updateNativeNodePoolParam.KeyIds = append(updateNativeNodePoolParam.KeyIds, helper.String(keyIds))
				}
			}
			request.Native = &updateNativeNodePoolParam
		}

		if v, ok := d.GetOk("annotations"); ok {
			for _, item := range v.(*schema.Set).List() {
				annotationsMap := item.(map[string]interface{})
				annotation := tke2.Annotation{}
				if v, ok := annotationsMap["name"]; ok {
					annotation.Name = helper.String(v.(string))
				}
				if v, ok := annotationsMap["value"]; ok {
					annotation.Value = helper.String(v.(string))
				}
				request.Annotations = append(request.Annotations, &annotation)
			}
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTke2Client().ModifyNodePoolWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update kubernetes native node pool failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudKubernetesNativeNodePoolRead(d, meta)
}

func resourceTencentCloudKubernetesNativeNodePoolDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_native_node_pool.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	clusterId := idSplit[0]
	nodePoolId := idSplit[1]

	var (
		request  = tke2.NewDeleteNodePoolRequest()
		response = tke2.NewDeleteNodePoolResponse()
	)

	request.ClusterId = &clusterId

	request.NodePoolId = &nodePoolId

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTke2Client().DeleteNodePoolWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete kubernetes native node pool failed, reason:%+v", logId, err)
		return err
	}

	// wait for delete ok
	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
	err = resource.Retry(5*tccommon.ReadRetryTimeout, func() *resource.RetryError {
		respData, errRet := service.DescribeKubernetesNativeNodePoolById(ctx, clusterId, nodePoolId)
		if errRet != nil {
			errCode := errRet.(*sdkErrors.TencentCloudSDKError).Code
			if strings.Contains(errCode, "InternalError") {
				return nil
			}
			return tccommon.RetryError(errRet, tccommon.InternalError)
		}
		if respData != nil && *respData.LifeState == "Deleting" {
			log.Printf("[DEBUG]%s api[%s] native node pool %s still alive and status is %s", logId, request.GetAction(), nodePoolId, *respData.LifeState)
			return resource.RetryableError(fmt.Errorf("native node pool %s still alive and status is %s", nodePoolId, *respData.LifeState))
		}
		return nil
	})

	_ = response
	return nil
}
