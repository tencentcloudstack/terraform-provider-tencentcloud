// Code generated by iacg; DO NOT EDIT.
package tke

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	tkev20180525 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tke/v20180525"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudKubernetesAddonAttachment() *schema.Resource {
	return &schema.Resource{
		DeprecationMessage: "This resource has been deprecated in Terraform TencentCloud provider version 1.81.200. Please use 'tencentcloud_kubernetes_addon' instead.",
		Create:             resourceTencentCloudKubernetesAddonAttachmentCreate,
		Read:               resourceTencentCloudKubernetesAddonAttachmentRead,
		Update:             resourceTencentCloudKubernetesAddonAttachmentUpdate,
		Delete:             resourceTencentCloudKubernetesAddonAttachmentDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "ID of cluster.",
			},

			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Name of addon.",
			},

			"version": {
				Type:          schema.TypeString,
				Optional:      true,
				Computed:      true,
				ConflictsWith: []string{"request_body"},
				Description:   "Addon version, default latest version. Conflict with `request_body`.",
			},

			"values": {
				Type:          schema.TypeList,
				Optional:      true,
				Computed:      true,
				ConflictsWith: []string{"request_body"},
				Description:   "Values the addon passthroughs. Conflict with `request_body`.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"raw_values": {
				Type:          schema.TypeString,
				Optional:      true,
				Computed:      true,
				ConflictsWith: []string{"request_body"},
				RequiredWith:  []string{"raw_values_type"},
				Description:   "Raw Values. Conflict with `request_body`. Required with `raw_values_type`.",
			},

			"raw_values_type": {
				Type:         schema.TypeString,
				Optional:     true,
				Computed:     true,
				RequiredWith: []string{"raw_values"},
				Description:  "The type of raw Values. Required with `raw_values`.",
			},

			"request_body": {
				Type:          schema.TypeString,
				Optional:      true,
				ConflictsWith: []string{"version", "values"},
				Description:   "Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.",
			},

			"response_body": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Addon response body.",
			},

			"status": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: "Addon current status.",
			},
		},
	}
}

func resourceTencentCloudKubernetesAddonAttachmentCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_addon_attachment.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		clusterId string
		name      string
	)
	var (
		request  = tkev20180525.NewForwardApplicationRequestV3Request()
		response = tkev20180525.NewForwardApplicationRequestV3Response()
	)

	if v, ok := d.GetOk("cluster_id"); ok {
		clusterId = v.(string)
	}
	if v, ok := d.GetOk("name"); ok {
		name = v.(string)
	}

	if v, ok := d.GetOk("cluster_id"); ok {
		request.ClusterName = helper.String(v.(string))
	}

	if v, ok := d.GetOk("path"); ok {
		request.Path = helper.String(v.(string))
	}

	if v, ok := d.GetOk("request_body"); ok {
		request.RequestBody = helper.String(v.(string))
	}

	if err := resourceTencentCloudKubernetesAddonAttachmentCreatePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTkeV20180525Client().ForwardApplicationRequestV3WithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create kubernetes addon attachment failed, reason:%+v", logId, err)
		return err
	}

	_ = response

	if err := resourceTencentCloudKubernetesAddonAttachmentCreatePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	d.SetId(strings.Join([]string{clusterId, name}, tccommon.FILED_SP))

	return resourceTencentCloudKubernetesAddonAttachmentRead(d, meta)
}

func resourceTencentCloudKubernetesAddonAttachmentRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_addon_attachment.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	clusterId := idSplit[0]
	name := idSplit[1]

	_ = d.Set("cluster_id", clusterId)

	_ = d.Set("name", name)

	respData, err := service.DescribeKubernetesAddonAttachmentById(ctx)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `kubernetes_addon_attachment` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.ResponseBody != nil {
		_ = d.Set("response_body", respData.ResponseBody)
	}

	if err := resourceTencentCloudKubernetesAddonAttachmentReadPostHandleResponse0(ctx, respData); err != nil {
		return err
	}

	_ = clusterId
	_ = name
	return nil
}

func resourceTencentCloudKubernetesAddonAttachmentUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_addon_attachment.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	clusterId := idSplit[0]
	name := idSplit[1]

	needChange := false
	mutableArgs := []string{}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := tkev20180525.NewForwardApplicationRequestV3Request()

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTkeV20180525Client().ForwardApplicationRequestV3WithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update kubernetes addon attachment failed, reason:%+v", logId, err)
			return err
		}
	}

	if err := resourceTencentCloudKubernetesAddonAttachmentUpdateOnExit(ctx); err != nil {
		return err
	}

	_ = clusterId
	_ = name
	return resourceTencentCloudKubernetesAddonAttachmentRead(d, meta)
}

func resourceTencentCloudKubernetesAddonAttachmentDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_addon_attachment.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	clusterId := idSplit[0]
	name := idSplit[1]

	var (
		request  = tkev20180525.NewForwardApplicationRequestV3Request()
		response = tkev20180525.NewForwardApplicationRequestV3Response()
	)

	if err := resourceTencentCloudKubernetesAddonAttachmentDeletePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTkeV20180525Client().ForwardApplicationRequestV3WithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete kubernetes addon attachment failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	if err := resourceTencentCloudKubernetesAddonAttachmentDeletePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	_ = clusterId
	_ = name
	return nil
}
