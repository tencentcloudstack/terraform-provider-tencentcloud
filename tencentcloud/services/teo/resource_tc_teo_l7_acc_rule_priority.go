// Code generated by iacg; DO NOT EDIT.
package teo

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	teov20220901 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/teo/v20220901"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudTeoL7AccRulePriority() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudTeoL7AccRulePriorityCreate,
		Read:   resourceTencentCloudTeoL7AccRulePriorityRead,
		Update: resourceTencentCloudTeoL7AccRulePriorityUpdate,
		Delete: resourceTencentCloudTeoL7AccRulePriorityDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"zone_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Zone ID.",
			},

			"rule_ids": {
				Type:        schema.TypeList,
				Required:    true,
				Description: "The final priority order of the rule ID list will be adjusted to the order of the rule ID list, and will be executed from the front to the back. The later rules will overwrite the earlier rules.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

func resourceTencentCloudTeoL7AccRulePriorityCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_l7_acc_rule_priority.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		zoneId string
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}

	d.SetId(zoneId)

	return resourceTencentCloudTeoL7AccRulePriorityUpdate(d, meta)
}

func resourceTencentCloudTeoL7AccRulePriorityRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_l7_acc_rule_priority.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TeoService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	zoneId := d.Id()

	respData, err := service.DescribeTeoL7AccRuleById(ctx, zoneId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `teo_l7_acc_rule_priority` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}

	_ = d.Set("zone_id", zoneId)

	rulesList := make([]string, 0, len(respData.Rules))
	if respData.Rules != nil {
		for _, rule := range respData.Rules {
			rulesList = append(rulesList, *rule.RuleId)
		}

		_ = d.Set("rule_ids", rulesList)
	}

	return nil
}

func resourceTencentCloudTeoL7AccRulePriorityUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_l7_acc_rule_priority.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	zoneId := d.Id()

	needChange := false
	mutableArgs := []string{"rule_ids"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := teov20220901.NewModifyL7AccRulePriorityRequest()

		request.ZoneId = helper.String(zoneId)

		if v, ok := d.GetOk("rule_ids"); ok {
			for _, item := range v.([]interface{}) {
				ruleId := item.(string)
				request.RuleIds = append(request.RuleIds, helper.String(ruleId))
			}
		}

		reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().ModifyL7AccRulePriorityWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if reqErr != nil {
			log.Printf("[CRITAL]%s update teo l7 acc rule priority failed, reason:%+v", logId, reqErr)
			return reqErr
		}
	}

	return resourceTencentCloudTeoL7AccRulePriorityRead(d, meta)
}

func resourceTencentCloudTeoL7AccRulePriorityDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_l7_acc_rule_priority.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}
