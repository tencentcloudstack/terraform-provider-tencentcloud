// Code generated by iacg; DO NOT EDIT.
package mqtt

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	mqttv20240516 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/mqtt/v20240516"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudMqttInstancePublicEndpoint() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudMqttInstancePublicEndpointCreate,
		Read:   resourceTencentCloudMqttInstancePublicEndpointRead,
		Update: resourceTencentCloudMqttInstancePublicEndpointUpdate,
		Delete: resourceTencentCloudMqttInstancePublicEndpointDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "MQTT instance ID.",
			},

			"bandwidth": {
				Type:        schema.TypeInt,
				Required:    true,
				Description: "Bandwidth, unit: Mbps.",
			},

			"rules": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "White List of Public Network Access Rules.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ip_rule": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "IP network segment information.",
						},
						"remark": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Remarks.",
						},
					},
				},
			},
		},
	}
}

func resourceTencentCloudMqttInstancePublicEndpointCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mqtt_instance_public_endpoint.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		instanceId string
	)
	var (
		request  = mqttv20240516.NewCreateInsPublicEndpointRequest()
		response = mqttv20240516.NewCreateInsPublicEndpointResponse()
	)

	if v, ok := d.GetOk("instance_id"); ok {
		instanceId = v.(string)
	}

	if v, ok := d.GetOk("instance_id"); ok {
		request.InstanceId = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("bandwidth"); ok {
		request.Bandwidth = helper.IntInt64(v.(int))
	}

	if v, ok := d.GetOk("rules"); ok {
		for _, item := range v.(*schema.Set).List() {
			rulesMap := item.(map[string]interface{})
			publicAccessRule := mqttv20240516.PublicAccessRule{}
			if v, ok := rulesMap["ip_rule"].(string); ok && v != "" {
				publicAccessRule.IpRule = helper.String(v)
			}
			allow := true
			publicAccessRule.Allow = &allow
			if v, ok := rulesMap["remark"].(string); ok && v != "" {
				publicAccessRule.Remark = helper.String(v)
			}
			request.Rules = append(request.Rules, &publicAccessRule)
		}
	}

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseMqttV20240516Client().CreateInsPublicEndpointWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s create mqtt instance public endpoint failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	_ = response

	if _, err := (&resource.StateChangeConf{
		Delay:      10 * time.Second,
		MinTimeout: 3 * time.Second,
		Pending:    []string{},
		Refresh:    resourceMqttInstancePublicEndpointCreateStateRefreshFunc_0_0(ctx, instanceId),
		Target:     []string{"NORMAL"},
		Timeout:    300 * time.Second,
	}).WaitForStateContext(ctx); err != nil {
		return err
	}
	d.SetId(instanceId)

	return resourceTencentCloudMqttInstancePublicEndpointRead(d, meta)
}

func resourceTencentCloudMqttInstancePublicEndpointRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mqtt_instance_public_endpoint.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := MqttService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	instanceId := d.Id()

	_ = d.Set("instance_id", instanceId)

	respData, err := service.DescribeMqttInstancePublicEndpointById(ctx, instanceId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `mqtt_instance_public_endpoint` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.InstanceId != nil {
		_ = d.Set("instance_id", respData.InstanceId)
		instanceId = *respData.InstanceId
	}

	if respData.Bandwidth != nil {
		_ = d.Set("bandwidth", respData.Bandwidth)
	}

	rulesList := make([]map[string]interface{}, 0, len(respData.Rules))
	if respData.Rules != nil {
		for _, rules := range respData.Rules {
			rulesMap := map[string]interface{}{}

			if rules.IpRule != nil {
				rulesMap["ip_rule"] = rules.IpRule
			}

			if rules.Remark != nil {
				rulesMap["remark"] = rules.Remark
			}

			rulesList = append(rulesList, rulesMap)
		}

		_ = d.Set("rules", rulesList)
	}

	return nil
}

func resourceTencentCloudMqttInstancePublicEndpointUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mqtt_instance_public_endpoint.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"instance_id"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	instanceId := d.Id()

	needChange := false
	mutableArgs := []string{"bandwidth", "rules"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := mqttv20240516.NewModifyInsPublicEndpointRequest()

		request.InstanceId = helper.String(instanceId)

		if v, ok := d.GetOkExists("bandwidth"); ok {
			request.Bandwidth = helper.IntInt64(v.(int))
		}

		if v, ok := d.GetOk("rules"); ok {
			for _, item := range v.(*schema.Set).List() {
				rulesMap := item.(map[string]interface{})
				publicAccessRule := mqttv20240516.PublicAccessRule{}
				if v, ok := rulesMap["ip_rule"].(string); ok && v != "" {
					publicAccessRule.IpRule = helper.String(v)
				}
				allow := true
				publicAccessRule.Allow = &allow
				if v, ok := rulesMap["remark"].(string); ok && v != "" {
					publicAccessRule.Remark = helper.String(v)
				}
				request.Rules = append(request.Rules, &publicAccessRule)
			}
		}

		reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseMqttV20240516Client().ModifyInsPublicEndpointWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if reqErr != nil {
			log.Printf("[CRITAL]%s update mqtt instance public endpoint failed, reason:%+v", logId, reqErr)
			return reqErr
		}
		if _, err := (&resource.StateChangeConf{
			Delay:      10 * time.Second,
			MinTimeout: 3 * time.Second,
			Pending:    []string{},
			Refresh:    resourceMqttInstancePublicEndpointUpdateStateRefreshFunc_0_0(ctx, instanceId),
			Target:     []string{"NORMAL"},
			Timeout:    300 * time.Second,
		}).WaitForStateContext(ctx); err != nil {
			return err
		}
	}

	return resourceTencentCloudMqttInstancePublicEndpointRead(d, meta)
}

func resourceTencentCloudMqttInstancePublicEndpointDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mqtt_instance_public_endpoint.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	instanceId := d.Id()

	var (
		request  = mqttv20240516.NewDeleteInsPublicEndpointRequest()
		response = mqttv20240516.NewDeleteInsPublicEndpointResponse()
	)

	request.InstanceId = helper.String(instanceId)

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseMqttV20240516Client().DeleteInsPublicEndpointWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s delete mqtt instance public endpoint failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	_ = response
	return nil
}

func resourceMqttInstancePublicEndpointCreateStateRefreshFunc_0_0(ctx context.Context, instanceId string) resource.StateRefreshFunc {
	var req *mqttv20240516.DescribeInsPublicEndpointsRequest
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = mqttv20240516.NewDescribeInsPublicEndpointsRequest()
			req.InstanceId = helper.String(instanceId)

		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseMqttV20240516Client().DescribeInsPublicEndpointsWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		state := fmt.Sprintf("%v", *resp.Response.Status)
		return resp.Response, state, nil
	}
}

func resourceMqttInstancePublicEndpointUpdateStateRefreshFunc_0_0(ctx context.Context, instanceId string) resource.StateRefreshFunc {
	var req *mqttv20240516.DescribeInsPublicEndpointsRequest
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = mqttv20240516.NewDescribeInsPublicEndpointsRequest()
			req.InstanceId = helper.String(instanceId)

		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseMqttV20240516Client().DescribeInsPublicEndpointsWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		state := fmt.Sprintf("%v", *resp.Response.Status)
		return resp.Response, state, nil
	}
}
