// Code generated by iacg; DO NOT EDIT.
package sqlserver

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	sqlserverv20180328 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/sqlserver/v20180328"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudSqlserverCollationTimeZone() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudSqlserverCollationTimeZoneRead,
		Schema: map[string]*schema.Schema{
			"machine_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The host type of the purchased instance, PM-physical machine, CLOUD_PREMIUM-cloud server high-performance cloud disk, CLOUD_SSD-cloud server SSD cloud disk, CLOUD_HSSD-cloud server enhanced SSD cloud disk, CLOUD_TSSD-cloud server ultra-fast SSD cloud disk, CLOUD_BSSD-cloud server general SSD cloud disk, CLOUD_BASIC-cloud server cloud hard disk, the default value is PM.",
			},

			"db_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Purchase instance version number.",
			},

			"collation": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of system character set collations.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"time_zone": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "System time zone list.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudSqlserverCollationTimeZoneRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_sqlserver_collation_time_zone.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := SqlserverService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("machine_type"); ok {
		paramMap["MachineType"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("db_version"); ok {
		paramMap["DBVersion"] = helper.String(v.(string))
	}

	var respData *sqlserverv20180328.DescribeCollationTimeZoneResponseParams
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeSqlserverCollationTimeZoneByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	ids := make([]*string, 0)
	if respData.Collation != nil {
		_ = d.Set("collation", respData.Collation)
		ids = append(ids, respData.Collation...)
	}

	if respData.TimeZone != nil {
		_ = d.Set("time_zone", respData.TimeZone)
		ids = append(ids, respData.TimeZone...)
	}

	d.SetId(helper.DataResourceIdsHash([]string{helper.StrListToStr(ids)}))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), d); e != nil {
			return e
		}
	}

	return nil
}
