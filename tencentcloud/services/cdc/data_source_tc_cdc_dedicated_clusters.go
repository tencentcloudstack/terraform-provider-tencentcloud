// Code generated by iacg; DO NOT EDIT.
package cdc

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cdcv20201214 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cdc/v20201214"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudCdcDedicatedClusters() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudCdcDedicatedClustersRead,
		Schema: map[string]*schema.Schema{
			"dedicated_cluster_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Query by one or more instance IDs. Example of instance ID: cluster-xxxxxxxx.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"zones": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Filter by AZ name.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"site_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Filter by site id.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"lifecycle_statuses": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "Filter by CDC life cycle.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Name of fuzzy matching CDC.",
			},

			"dedicated_cluster_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of CDCs that meet the conditions.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dedicated_cluster_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "CDC id, e.g., cluster-xxxxx.",
						},
						"zone": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Name of AZ to which the CDC belongs.",
						},
						"description": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "CDC description \nNote: The returned value of this field may be null, indicating that no valid value is obtained.",
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "CDC name.",
						},
						"lifecycle_status": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Life cycle of the CDC, e.g., PENDING.",
						},
						"create_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Creation time of the CDC.",
						},
						"site_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Site id to which the CDC belongs.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudCdcDedicatedClustersRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_cdc_dedicated_clusters.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CdcService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("dedicated_cluster_ids"); ok {
		dedicatedClusterIdsList := []*string{}
		dedicatedClusterIdsSet := v.(*schema.Set).List()
		for i := range dedicatedClusterIdsSet {
			dedicatedClusterIds := dedicatedClusterIdsSet[i].(string)
			dedicatedClusterIdsList = append(dedicatedClusterIdsList, helper.String(dedicatedClusterIds))
		}
		paramMap["DedicatedClusterIds"] = dedicatedClusterIdsList
	}

	if v, ok := d.GetOk("zones"); ok {
		zonesList := []*string{}
		zonesSet := v.(*schema.Set).List()
		for i := range zonesSet {
			zones := zonesSet[i].(string)
			zonesList = append(zonesList, helper.String(zones))
		}
		paramMap["Zones"] = zonesList
	}

	if v, ok := d.GetOk("site_ids"); ok {
		siteIdsList := []*string{}
		siteIdsSet := v.(*schema.Set).List()
		for i := range siteIdsSet {
			siteIds := siteIdsSet[i].(string)
			siteIdsList = append(siteIdsList, helper.String(siteIds))
		}
		paramMap["SiteIds"] = siteIdsList
	}

	if v, ok := d.GetOk("lifecycle_statuses"); ok {
		lifecycleStatusesList := []*string{}
		lifecycleStatusesSet := v.(*schema.Set).List()
		for i := range lifecycleStatusesSet {
			lifecycleStatuses := lifecycleStatusesSet[i].(string)
			lifecycleStatusesList = append(lifecycleStatusesList, helper.String(lifecycleStatuses))
		}
		paramMap["LifecycleStatuses"] = lifecycleStatusesList
	}

	if v, ok := d.GetOk("name"); ok {
		paramMap["Name"] = helper.String(v.(string))
	}

	var respData []*cdcv20201214.DedicatedCluster
	reqErr := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeCdcDedicatedClustersByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if reqErr != nil {
		return reqErr
	}

	var ids []string
	dedicatedClusterSetList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, dedicatedClusterSet := range respData {
			dedicatedClusterSetMap := map[string]interface{}{}

			var dedicatedClusterId string
			if dedicatedClusterSet.DedicatedClusterId != nil {
				dedicatedClusterSetMap["dedicated_cluster_id"] = dedicatedClusterSet.DedicatedClusterId
			}

			if dedicatedClusterSet.Zone != nil {
				dedicatedClusterSetMap["zone"] = dedicatedClusterSet.Zone
			}

			if dedicatedClusterSet.Description != nil {
				dedicatedClusterSetMap["description"] = dedicatedClusterSet.Description
			}

			if dedicatedClusterSet.Name != nil {
				dedicatedClusterSetMap["name"] = dedicatedClusterSet.Name
			}

			if dedicatedClusterSet.LifecycleStatus != nil {
				dedicatedClusterSetMap["lifecycle_status"] = dedicatedClusterSet.LifecycleStatus
			}

			if dedicatedClusterSet.CreateTime != nil {
				dedicatedClusterSetMap["create_time"] = dedicatedClusterSet.CreateTime
			}

			if dedicatedClusterSet.SiteId != nil {
				dedicatedClusterSetMap["site_id"] = dedicatedClusterSet.SiteId
			}

			ids = append(ids, dedicatedClusterId)
			dedicatedClusterSetList = append(dedicatedClusterSetList, dedicatedClusterSetMap)
		}

		_ = d.Set("dedicated_cluster_set", dedicatedClusterSetList)
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dedicatedClusterSetList); e != nil {
			return e
		}
	}

	return nil
}
