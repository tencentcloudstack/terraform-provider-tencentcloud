// Code generated by iacg; DO NOT EDIT.
package cls

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	clsv20201016 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cls/v20201016"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudClsWebCallback() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudClsWebCallbackCreate,
		Read:   resourceTencentCloudClsWebCallbackRead,
		Update: resourceTencentCloudClsWebCallbackUpdate,
		Delete: resourceTencentCloudClsWebCallbackDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Notification content name.",
			},

			"type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Channel type. WeCom: WeChat for Enterprise; DingTalk: DingTalk; Lark: Feishu; Http: custom callback.",
			},

			"webhook": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Webhook address.",
			},

			"method": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Request method. Supports POST and PUT. Required when Type is Http.",
			},

			"key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Secret key.",
			},
		},
	}
}

func resourceTencentCloudClsWebCallbackCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cls_web_callback.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		webCallbackId string
	)
	var (
		request  = clsv20201016.NewCreateWebCallbackRequest()
		response = clsv20201016.NewCreateWebCallbackResponse()
	)

	if v, ok := d.GetOk("name"); ok {
		request.Name = helper.String(v.(string))
	}

	if v, ok := d.GetOk("type"); ok {
		request.Type = helper.String(v.(string))
	}

	if v, ok := d.GetOk("webhook"); ok {
		request.Webhook = helper.String(v.(string))
	}

	if v, ok := d.GetOk("method"); ok {
		request.Method = helper.String(v.(string))
	}

	if v, ok := d.GetOk("key"); ok {
		request.Key = helper.String(v.(string))
	}

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseClsV20201016Client().CreateWebCallbackWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s create cls web callback failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	webCallbackId = *response.Response.WebCallbackId

	d.SetId(webCallbackId)

	return resourceTencentCloudClsWebCallbackRead(d, meta)
}

func resourceTencentCloudClsWebCallbackRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cls_web_callback.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := ClsService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	webCallbackId := d.Id()

	respData, err := service.DescribeClsWebCallbackById(ctx, webCallbackId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `cls_web_callback` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.Name != nil {
		_ = d.Set("name", respData.Name)
	}

	if respData.Type != nil {
		_ = d.Set("type", respData.Type)
	}

	if respData.Webhook != nil {
		_ = d.Set("webhook", respData.Webhook)
	}

	if respData.Method != nil {
		_ = d.Set("method", respData.Method)
	}

	if respData.Key != nil {
		_ = d.Set("key", respData.Key)
	}

	return nil
}

func resourceTencentCloudClsWebCallbackUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cls_web_callback.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	webCallbackId := d.Id()

	needChange := false
	mutableArgs := []string{"name", "type", "webhook", "method", "key"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := clsv20201016.NewModifyWebCallbackRequest()

		request.WebCallbackId = helper.String(webCallbackId)

		if v, ok := d.GetOk("name"); ok {
			request.Name = helper.String(v.(string))
		}

		if v, ok := d.GetOk("type"); ok {
			request.Type = helper.String(v.(string))
		}

		if v, ok := d.GetOk("webhook"); ok {
			request.Webhook = helper.String(v.(string))
		}

		if v, ok := d.GetOk("method"); ok {
			request.Method = helper.String(v.(string))
		}

		if v, ok := d.GetOk("key"); ok {
			request.Key = helper.String(v.(string))
		}

		reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseClsV20201016Client().ModifyWebCallbackWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if reqErr != nil {
			log.Printf("[CRITAL]%s update cls web callback failed, reason:%+v", logId, reqErr)
			return reqErr
		}
	}

	return resourceTencentCloudClsWebCallbackRead(d, meta)
}

func resourceTencentCloudClsWebCallbackDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cls_web_callback.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	webCallbackId := d.Id()

	var (
		request  = clsv20201016.NewDeleteWebCallbackRequest()
		response = clsv20201016.NewDeleteWebCallbackResponse()
	)

	request.WebCallbackId = helper.String(webCallbackId)

	reqErr := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseClsV20201016Client().DeleteWebCallbackWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if reqErr != nil {
		log.Printf("[CRITAL]%s delete cls web callback failed, reason:%+v", logId, reqErr)
		return reqErr
	}

	_ = response
	return nil
}
